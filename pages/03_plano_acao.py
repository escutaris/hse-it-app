import streamlit as st
import pandas as pd
import io
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from utils.processamento import classificar_risco, padronizar_formato_data

# Aplicar estilo consistente da Escutaris
def aplicar_estilo_escutaris():
    st.markdown("""
    <style>
    /* Cores principais */
    :root {
        --escutaris-verde: #5A713D;
        --escutaris-cinza: #2E2F2F;
        --escutaris-bege: #F5F0EB;
        --escutaris-laranja: #FF5722;
    }
    
    /* T√≠tulos */
    h1, h2, h3 {
        color: var(--escutaris-verde) !important;
        font-family: 'Helvetica Neue', Arial, sans-serif !important;
    }
    
    /* Subt√≠tulos */
    h4, h5, h6 {
        color: var(--escutaris-cinza) !important;
        font-family: 'Helvetica Neue', Arial, sans-serif !important;
    }
    
    /* Bot√µes */
    .stButton>button {
        background-color: var(--escutaris-verde) !important;
        color: white !important;
        border-radius: 5px !important;
    }
    
    /* M√©tricas */
    div.css-1xarl3l.e16fv1kl1 {
        background-color: white;
        border-radius: 10px;
        padding: 10px 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    /* Cards */
    .card {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin-bottom: 15px;
    }
    
    /* Abas */
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: #f0f0f0;
        border-radius: 4px 4px 0px 0px;
        padding: 10px 20px;
        border: none;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: var(--escutaris-verde) !important;
        color: white !important;
    }
    
    /* Expander */
    .streamlit-expanderHeader {
        background-color: #f5f5f5;
        border-radius: 5px;
    }
    
    /* Progress bar */
    .stProgress > div > div > div > div {
        background-color: var(--escutaris-verde);
    }
    
    /* Cor dos links */
    a {
        color: var(--escutaris-verde) !important;
    }
    
    /* Formul√°rio de a√ß√£o */
    .action-form {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid var(--escutaris-verde);
    }
    
    /* Status de risco */
    .risco-muito-alto {
        background-color: #f8d7da;
        color: #721c24;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.9em;
        font-weight: bold;
    }
    
    .risco-alto {
        background-color: #fff3cd;
        color: #856404;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.9em;
        font-weight: bold;
    }
    
    .risco-moderado {
        background-color: #fff3cd;
        color: #856404;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.9em;
    }
    
    .risco-baixo {
        background-color: #d4edda;
        color: #155724;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.9em;
    }
    
    .risco-muito-baixo {
        background-color: #d1ecf1;
        color: #0c5460;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 0.9em;
    }
    
    /* Tabela de plano de a√ß√£o */
    .tabela-plano-acao {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }
    
    .tabela-plano-acao th {
        background-color: var(--escutaris-verde);
        color: white;
        text-align: left;
        padding: 12px;
        font-size: 0.9em;
    }
    
    .tabela-plano-acao td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        font-size: 0.9em;
    }
    
    .tabela-plano-acao tr:nth-child(even) {
        background-color: #f8f9fa;
    }
    
    .tabela-plano-acao tr:hover {
        background-color: #f1f1f1;
    }
    
    /* Tooltip personalizado */
    .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted #ccc;
        cursor: help;
    }
    
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        opacity: 0;
        transition: opacity 0.3s;
    }
    
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    
    /* Melhoria visual para √°reas de texto */
    textarea {
        border-radius: 5px;
    }
    
    /* Caixa de informa√ß√£o destacada */
    .info-box {
        background-color: #F5F7F0;
        border-left: 4px solid var(--escutaris-verde);
        padding: 15px;
        margin: 15px 0;
        border-radius: 5px;
    }
    
    /* Badge de n√≠vel de risco */
    .badge-risk {
        display: inline-block;
        padding: 3px 10px;
        border-radius: 15px;
        font-size: 0.8em;
        font-weight: bold;
        margin: 5px 0;
    }
    
    /* Ajustes para visualiza√ß√£o mobile */
    @media (max-width: 768px) {
        .tabela-plano-acao th, .tabela-plano-acao td {
            padding: 8px 5px;
            font-size: 0.8em;
        }
    }
    </style>
    """, unsafe_allow_html=True)

# Aplicar o estilo
aplicar_estilo_escutaris()

# T√≠tulo da p√°gina
st.title("Plano de A√ß√£o - HSE-IT")

# Verificar se h√° dados para exibir - CORRIGIDO: Verifica√ß√£o segura
if "df_resultados" not in st.session_state or st.session_state.get("df_resultados") is None:
    st.warning("Nenhum resultado dispon√≠vel. Por favor, fa√ßa upload de um arquivo na p√°gina 'Upload de Dados'.")
    st.stop()

# Texto introdut√≥rio explicando o prop√≥sito do plano de a√ß√£o
st.markdown("""
<div class="info-box">
<p>Este plano de a√ß√£o cont√©m sugest√µes de medidas baseadas nos resultados da avalia√ß√£o HSE-IT. 
As sugest√µes devem ser adaptadas √† realidade da sua organiza√ß√£o e servir como ponto de partida
para discuss√µes com a gest√£o e equipe de sa√∫de e seguran√ßa.</p> 

<p>Utilize este conte√∫do para subsidiar o Programa de Gerenciamento de Riscos (PGR) e demais 
documentos pertinentes √† sa√∫de e seguran√ßa no trabalho.</p>
</div>
""", unsafe_allow_html=True)

# Filtros para o plano de a√ß√£o
st.subheader("Filtros")

# Recuperar os resultados de forma segura - CORRIGIDO
try:
    df_resultados = st.session_state.get("df_resultados")
    df_plano_acao = st.session_state.get("df_plano_acao")
    
    if df_resultados is None or df_plano_acao is None:
        st.error("Dados do plano de a√ß√£o n√£o dispon√≠veis. Por favor, retorne √† p√°gina de upload.")
        st.stop()
except Exception as e:
    st.error(f"Erro ao recuperar dados da sess√£o: {str(e)}")
    st.info("Por favor, retorne √† p√°gina de upload e carregue seus dados novamente.")
    st.stop()

# Definir n√≠veis de risco para filtrar
niveis_risco = ["Risco Muito Alto üî¥", "Risco Alto üü†", "Risco Moderado üü°", "Risco Baixo üü¢", "Risco Muito Baixo üü£"]

# Definir filtros para o plano de a√ß√£o
col1, col2 = st.columns(2)

with col1:
    # Filtro por n√≠vel de risco
    niveis_selecionados = st.multiselect(
        "Filtrar por n√≠vel de risco:",
        niveis_risco,
        default=["Risco Muito Alto üî¥", "Risco Alto üü†", "Risco Moderado üü°"],
        help="Selecione os n√≠veis de risco que deseja incluir no plano de a√ß√£o"
    )
    
    # Adicionar nota sobre n√≠veis opcionais
    st.caption("Nota: Os n√≠veis 'Risco Baixo üü¢' e 'Risco Muito Baixo üü£' s√£o opcionais e podem ser inclu√≠dos conforme necessidade da organiza√ß√£o.")

with col2:
    # Filtro por dimens√£o - CORRIGIDO: Verifica√ß√£o segura de "Dimens√£o"
    dimensoes = []
    try:
        if "Dimens√£o" in df_resultados.columns:
            dimensoes = df_resultados["Dimens√£o"].unique()
        else:
            st.warning("N√£o foi poss√≠vel identificar as dimens√µes nos resultados.")
    except Exception as e:
        st.error(f"Erro ao obter dimens√µes: {str(e)}")
        
    dimensoes_selecionadas = st.multiselect(
        "Filtrar por dimens√£o:",
        dimensoes,
        default=list(dimensoes),
        help="Selecione as dimens√µes que deseja incluir no plano de a√ß√£o"
    )

# Criar dataframe para conter os dados do plano de a√ß√£o
def gerar_plano_acao_tabular():
    try:
        # Filtrar resultados conforme sele√ß√µes
        df_filtrado = df_resultados[
            (df_resultados["Dimens√£o"].isin(dimensoes_selecionadas)) &
            (df_resultados["Risco"].isin(niveis_selecionados))
        ]
        
        # Se n√£o h√° dados ap√≥s filtro, retornar DataFrame vazio com as colunas corretas
        if df_filtrado.empty:
            return pd.DataFrame(columns=[
                "Dimens√£o", 
                "M√©dia", 
                "N√≠vel de Risco",
                "Riscos Potenciais", 
                "Sugest√µes de A√ß√µes Mitigantes", 
                "Outras Solu√ß√µes", 
                "Respons√°vel", 
                "Prazo"
            ])
        
        # Criar o plano de a√ß√£o em formato tabular
        plano_acao_rows = []
        
        # Mapeamento de riscos potenciais para cada dimens√£o
        riscos_potenciais = {
            "Demanda": "Sobrecarga de trabalho levando a estresse, burnout, fadiga, erros operacionais e potencial adoecimento f√≠sico e mental.",
            "Controle": "Falta de autonomia e participa√ß√£o nas decis√µes, gerando desmotiva√ß√£o, aliena√ß√£o, insatisfa√ß√£o e menor engajamento.",
            "Apoio da Chefia": "Lideran√ßa inadequada causando desmotiva√ß√£o, conflitos, falta de direcionamento e baixo desempenho da equipe.",
            "Apoio dos Colegas": "Ambiente de trabalho n√£o colaborativo, levando a isolamento, dificuldades de integra√ß√£o e baixa produtividade em equipe.",
            "Relacionamentos": "Conflitos interpessoais, ass√©dio moral/sexual, viol√™ncia e deteriora√ß√£o do clima organizacional.",
            "Fun√ß√£o": "Falta de clareza sobre pap√©is e responsabilidades, causando retrabalho, conflitos, inefici√™ncia e estresse.",
            "Mudan√ßa": "Resist√™ncia, ansiedade e inseguran√ßa frente a mudan√ßas organizacionais, prejudicando adapta√ß√£o e implementa√ß√£o."
        }
        
        # Definir a√ß√µes mitigantes para cada n√≠vel de risco e dimens√£o
        acoes_mitigantes = {
            "Demanda": {
                "Risco Muito Alto üî¥": [
                    "Realizar auditoria completa da distribui√ß√£o de carga de trabalho",
                    "Implementar sistema de gest√£o de tarefas e prioriza√ß√£o",
                    "Reavaliar prazos e expectativas de produtividade",
                    "Contratar pessoal adicional para √°reas sobrecarregadas"
                ],
                "Risco Alto üü†": [
                    "Mapear atividades e identificar gargalos de processo",
                    "Implementar ferramentas para melhor organiza√ß√£o do trabalho",
                    "Revisar e ajustar prazos de entregas e metas",
                    "Capacitar gestores em gerenciamento de carga de trabalho"
                ],
                "Risco Moderado üü°": [
                    "Promover treinamentos de gest√£o do tempo e prioriza√ß√£o",
                    "Revisar distribui√ß√£o de tarefas entre membros da equipe",
                    "Implementar pausas regulares durante a jornada de trabalho"
                ],
                "Risco Baixo üü¢": [
                    "Manter monitoramento regular das demandas de trabalho",
                    "Realizar check-ins peri√≥dicos sobre volume de trabalho"
                ],
                "Risco Muito Baixo üü£": [
                    "Documentar boas pr√°ticas atuais de gest√£o de demandas",
                    "Manter pr√°ticas de gest√£o de demandas e continuar monitorando"
                ]
            },
            "Controle": {
                "Risco Muito Alto üî¥": [
                    "Redesenhar processos para aumentar a autonomia dos trabalhadores",
                    "Implementar esquemas de trabalho flex√≠vel",
                    "Revisar pol√≠ticas de microgerenciamento",
                    "Treinar gestores em delega√ß√£o efetiva"
                ],
                "Risco Alto üü†": [
                    "Identificar √°reas onde os trabalhadores podem ter mais controle",
                    "Envolver colaboradores no planejamento de metas e m√©todos",
                    "Implementar sistema de sugest√µes para melhorias nos processos",
                    "Oferecer op√ß√µes de hor√°rios flex√≠veis"
                ],
                "Risco Moderado üü°": [
                    "Aumentar gradualmente a autonomia nas decis√µes rotineiras",
                    "Solicitar feedback regular sobre n√≠vel de controle no trabalho",
                    "Implementar projetos-piloto para testar maior autonomia"
                ],
                "Risco Baixo üü¢": [
                    "Manter boas pr√°ticas de autonomia",
                    "Revisar periodicamente √°reas onde o controle pode ser ampliado"
                ],
                "Risco Muito Baixo üü£": [
                    "Documentar pr√°ticas bem-sucedidas de autonomia",
                    "Manter cultura de confian√ßa e delega√ß√£o"
                ]
            },
            "Apoio da Chefia": {
                "Risco Muito Alto üî¥": [
                    "Implementar programa estruturado de desenvolvimento de lideran√ßas",
                    "Realizar avalia√ß√£o 360¬∞ para gestores",
                    "Estabelecer canais de comunica√ß√£o direta entre colaboradores e dire√ß√£o",
                    "Revisar pol√≠ticas de promo√ß√£o para valorizar bons l√≠deres"
                ],
                "Risco Alto üü†": [
                    "Treinar gestores em habilidades de suporte e feedback",
                    "Implementar reuni√µes regulares one-on-one com liderados",
                    "Estabelecer expectativas claras para comportamentos de lideran√ßa",
                    "Criar f√≥runs para l√≠deres compartilharem desafios e solu√ß√µes"
                ],
                "Risco Moderado üü°": [
                    "Revisar e melhorar as pr√°ticas de feedback das lideran√ßas",
                    "Promover workshops sobre comunica√ß√£o efetiva",
                    "Oferecer recursos para l√≠deres apoiarem suas equipes"
                ],
                "Risco Baixo üü¢": [
                    "Manter programas de desenvolvimento de lideran√ßas",
                    "Reconhecer e celebrar boas pr√°ticas de lideran√ßa"
                ],
                "Risco Muito Baixo üü£": [
                    "Documentar pr√°ticas exemplares de lideran√ßa",
                    "Utilizar l√≠deres como mentores para novos gestores"
                ]
            },
            "Apoio dos Colegas": {
                "Risco Muito Alto üî¥": [
                    "Implementar programas estruturados de team building",
                    "Revisar a composi√ß√£o e din√¢mica das equipes",
                    "Estabelecer facilitadores de equipe para melhorar integra√ß√£o",
                    "Criar espa√ßos f√≠sicos e virtuais para colabora√ß√£o"
                ],
                "Risco Alto üü†": [
                    "Promover atividades regulares de integra√ß√£o de equipes",
                    "Treinar em habilidades de trabalho em equipe e comunica√ß√£o",
                    "Estabelecer objetivos compartilhados que incentivem a colabora√ß√£o",
                    "Revisar processos que possam estar criando competi√ß√£o indesejada"
                ],
                "Risco Moderado üü°": [
                    "Implementar reuni√µes regulares de equipe para compartilhamento",
                    "Criar projetos colaborativos entre diferentes membros",
                    "Oferecer oportunidades para pessoas se conhecerem melhor"
                ],
                "Risco Baixo üü¢": [
                    "Manter momentos regulares de integra√ß√£o",
                    "Monitorar din√¢micas de equipe, especialmente com novos membros"
                ],
                "Risco Muito Baixo üü£": [
                    "Documentar boas pr√°ticas de colabora√ß√£o",
                    "Manter ambiente de confian√ßa e colabora√ß√£o"
                ]
            },
            "Relacionamentos": {
                "Risco Muito Alto üî¥": [
                    "Implementar pol√≠tica de toler√¢ncia zero para ass√©dio e comportamentos inadequados",
                    "Criar canais confidenciais para den√∫ncias",
                    "Treinar todos os colaboradores em respeito e diversidade",
                    "Estabelecer media√ß√£o de conflitos com profissionais externos"
                ],
                "Risco Alto üü†": [
                    "Desenvolver pol√≠tica clara sobre comportamentos aceit√°veis",
                    "Treinar gestores na identifica√ß√£o e gest√£o de conflitos",
                    "Implementar processos estruturados para resolu√ß√£o de conflitos",
                    "Promover di√°logo sobre relacionamentos saud√°veis no trabalho"
                ],
                "Risco Moderado üü°": [
                    "Realizar workshops sobre comunica√ß√£o n√£o-violenta",
                    "Estabelecer acordos de equipe sobre comportamentos esperados",
                    "Promover atividades que construam confian√ßa entre colegas"
                ],
                "Risco Baixo üü¢": [
                    "Manter comunica√ß√£o regular sobre respeito no ambiente de trabalho",
                    "Incorporar avalia√ß√£o de relacionamentos nas pesquisas de clima"
                ],
                "Risco Muito Baixo üü£": [
                    "Documentar boas pr√°ticas de relacionamentos saud√°veis",
                    "Manter monitoramento cont√≠nuo do clima relacional"
                ]
            },
            "Fun√ß√£o": {
                "Risco Muito Alto üî¥": [
                    "Realizar revis√£o completa de descri√ß√µes de cargos e responsabilidades",
                    "Implementar processo de clarifica√ß√£o de fun√ß√µes para toda a organiza√ß√£o",
                    "Treinar gestores em delega√ß√£o clara e defini√ß√£o de expectativas",
                    "Estabelecer processos para resolver conflitos de pap√©is"
                ],
                "Risco Alto üü†": [
                    "Revisar e atualizar descri√ß√µes de cargo",
                    "Implementar reuni√µes para esclarecer expectativas",
                    "Criar matriz RACI para projetos e processos",
                    "Treinar equipes em comunica√ß√£o sobre pap√©is e responsabilidades"
                ],
                "Risco Moderado üü°": [
                    "Revisar processos onde ocorrem conflitos de fun√ß√µes",
                    "Promover workshops para clarificar interfaces entre √°reas",
                    "Estabelecer f√≥runs para discutir e esclarecer pap√©is em projetos"
                ],
                "Risco Baixo üü¢": [
                    "Manter atualiza√ß√µes peri√≥dicas de responsabilidades",
                    "Incluir clareza de pap√©is nas avalia√ß√µes de desempenho"
                ],
                "Risco Muito Baixo üü£": [
                    "Documentar boas pr√°ticas de clareza de fun√ß√µes",
                    "Manter cultura de transpar√™ncia sobre pap√©is e responsabilidades"
                ]
            },
            "Mudan√ßa": {
                "Risco Muito Alto üî¥": [
                    "Implementar metodologia estruturada de gest√£o de mudan√ßas",
                    "Criar comit√™ representativo para planejamento de mudan√ßas",
                    "Estabelecer m√∫ltiplos canais de comunica√ß√£o sobre processos de mudan√ßa",
                    "Treinar gestores em lideran√ßa durante transforma√ß√µes"
                ],
                "Risco Alto üü†": [
                    "Desenvolver plano de comunica√ß√£o para mudan√ßas organizacionais",
                    "Envolver representantes de diferentes n√≠veis no planejamento",
                    "Implementar feedbacks regulares durante processos de mudan√ßa",
                    "Oferecer suporte adicional para equipes mais afetadas"
                ],
                "Risco Moderado üü°": [
                    "Melhorar a transpar√™ncia sobre raz√µes das mudan√ßas",
                    "Criar f√≥runs para esclarecer d√∫vidas sobre transforma√ß√µes",
                    "Celebrar pequenas vit√≥rias durante processos de mudan√ßa"
                ],
                "Risco Baixo üü¢": [
                    "Manter comunica√ß√£o proativa sobre poss√≠veis mudan√ßas",
                    "Oferecer oportunidades regulares para feedback durante transforma√ß√µes"
                ],
                "Risco Muito Baixo üü£": [
                    "Documentar pr√°ticas bem-sucedidas de gest√£o de mudan√ßas",
                    "Manter cultura de adaptabilidade e melhoria cont√≠nua"
                ]
            }
        }
        
        # Para cada dimens√£o nos resultados filtrados, gerar linhas do plano de a√ß√£o
        for _, row in df_filtrado.iterrows():
            dimensao = row["Dimens√£o"]
            media = row["M√©dia"]
            nivel_risco = row["Risco"]
            
            # Obter riscos potenciais para a dimens√£o com fallback seguro
            risco_potencial = riscos_potenciais.get(dimensao, "Riscos n√£o especificados para esta dimens√£o.")
            
            # Obter a√ß√µes mitigantes para o n√≠vel de risco e dimens√£o
            acoes = []
            acoes_por_dimensao = acoes_mitigantes.get(dimensao, {})
            if nivel_risco in acoes_por_dimensao:
                acoes = acoes_por_dimensao[nivel_risco]
            else:
                # Tentar correspond√™ncia parcial se n√£o houver correspond√™ncia exata
                for nivel_key in acoes_por_dimensao.keys():
                    if nivel_key.split()[0] in nivel_risco:
                        acoes = acoes_por_dimensao[nivel_key]
                        break
                
                # Se ainda n√£o encontrou, usar mensagem padr√£o
                if not acoes:
                    acoes = ["N√£o h√° sugest√µes espec√≠ficas para este n√≠vel de risco."]
                
            acoes_formatadas = "\n".join([f"‚Ä¢ {acao}" for acao in acoes])
            
            # Adicionar √† lista de linhas
            plano_acao_rows.append({
                "Dimens√£o": dimensao,
                "M√©dia": media,
                "N√≠vel de Risco": nivel_risco,
                "Riscos Potenciais": risco_potencial,
                "Sugest√µes de A√ß√µes Mitigantes": acoes_formatadas,
                "Outras Solu√ß√µes": "",
                "Respons√°vel": "",
                "Prazo": ""
            })
        
        return pd.DataFrame(plano_acao_rows)
    except Exception as e:
        st.error(f"Erro ao gerar plano de a√ß√£o: {str(e)}")
        import traceback
        st.code(traceback.format_exc())
        return pd.DataFrame()

# Gerar o plano de a√ß√£o
df_plano = gerar_plano_acao_tabular()

# Verificar se h√° resultados ap√≥s a filtragem
if df_plano.empty:
    st.warning("N√£o foram encontrados resultados para os filtros selecionados. Por favor, ajuste os filtros.")
else:
    # Exibir o plano de a√ß√£o em formato tabular edit√°vel
    st.subheader("Plano de A√ß√£o - HSE-IT")
    
    # Inicializar ou recuperar o plano edit√°vel da sess√£o - CORRIGIDO: Uso seguro
    if "plano_editavel" not in st.session_state:
        st.session_state["plano_editavel"] = df_plano.copy()
    elif len(st.session_state.get("plano_editavel", pd.DataFrame())) != len(df_plano):
        # Se os filtros mudaram e o tamanho mudou, atualizar o plano
        st.session_state["plano_editavel"] = df_plano.copy()
    
    # Criar uma visualiza√ß√£o edit√°vel do plano
    try:
        # CORRE√á√ÉO: Verificar se o atributo TextAreaColumn existe
        # Define configura√ß√µes de colunas com verifica√ß√£o de compatibilidade para diferentes vers√µes do Streamlit
        
        # Configura√ß√£o para Dimens√£o
        dimensao_config = st.column_config.TextColumn(
            "Dimens√£o",
            help="Dimens√£o do HSE-IT avaliada",
            disabled=True,
            width="medium"
        )
        
        # Configura√ß√£o para M√©dia
        media_config = st.column_config.NumberColumn(
            "M√©dia",
            help="Pontua√ß√£o m√©dia obtida na avalia√ß√£o (1-5)",
            format="%.2f",
            disabled=True,
            width="small"
        )
        
        # Configura√ß√£o para N√≠vel de Risco
        nivel_risco_config = st.column_config.TextColumn(
            "N√≠vel de Risco",
            help="Classifica√ß√£o do n√≠vel de risco baseada na m√©dia",
            disabled=True,
            width="medium"
        )
        
        # Configura√ß√£o para Riscos Potenciais
        riscos_config = st.column_config.TextColumn(
            "Riscos Potenciais",
            help="Consequ√™ncias potenciais relacionadas a este fator psicossocial",
            width="large"
        )
        
        # CORRE√á√ÉO: Verificar se TextAreaColumn est√° dispon√≠vel para Sugest√µes de A√ß√µes
        if hasattr(st.column_config, "TextAreaColumn"):
            # Usar TextAreaColumn se dispon√≠vel (vers√µes mais recentes)
            sugestoes_config = st.column_config.TextAreaColumn(
                "Sugest√µes de A√ß√µes Mitigantes",
                help="A√ß√µes sugeridas para mitigar os riscos identificados",
                width="large",
                height="medium"
            )
        else:
            # Fallback para vers√µes mais antigas
            sugestoes_config = st.column_config.Column(
                "Sugest√µes de A√ß√µes Mitigantes",
                help="A√ß√µes sugeridas para mitigar os riscos identificados",
                width="large"
            )
        
        # CORRE√á√ÉO: Verificar se TextAreaColumn est√° dispon√≠vel para Outras Solu√ß√µes
        if hasattr(st.column_config, "TextAreaColumn"):
            # Usar TextAreaColumn se dispon√≠vel (vers√µes mais recentes)
            outras_solucoes_config = st.column_config.TextAreaColumn(
                "Outras Solu√ß√µes",
                help="Adicione outras solu√ß√µes espec√≠ficas para sua organiza√ß√£o",
                width="large",
                height="medium"
            )
        else:
            # Fallback para vers√µes mais antigas
            outras_solucoes_config = st.column_config.Column(
                "Outras Solu√ß√µes",
                help="Adicione outras solu√ß√µes espec√≠ficas para sua organiza√ß√£o",
                width="large"
            )
        
        # Configura√ß√£o para Respons√°vel
        responsavel_config = st.column_config.TextColumn(
            "Respons√°vel",
            help="Pessoa ou equipe respons√°vel pela implementa√ß√£o",
            width="medium"
        )
        
        # Configura√ß√£o para Prazo
        prazo_config = st.column_config.DateColumn(
            "Prazo",
            help="Prazo para implementa√ß√£o das a√ß√µes",
            min_value=datetime.now().date(),
            format="DD/MM/YYYY",
            width="medium"
        )
        
        # Usar as configura√ß√µes na defini√ß√£o do data_editor
        edited_df = st.data_editor(
            st.session_state.get("plano_editavel", df_plano),
            column_config={
                "Dimens√£o": dimensao_config,
                "M√©dia": media_config,
                "N√≠vel de Risco": nivel_risco_config,
                "Riscos Potenciais": riscos_config,
                "Sugest√µes de A√ß√µes Mitigantes": sugestoes_config,
                "Outras Solu√ß√µes": outras_solucoes_config,
                "Respons√°vel": responsavel_config,
                "Prazo": prazo_config
            },
            use_container_width=True,
            num_rows="dynamic",
            hide_index=True
        )
        
        # Atualizar o estado da sess√£o com as edi√ß√µes
        st.session_state["plano_editavel"] = edited_df
    except Exception as e:
        st.error(f"Erro ao exibir editor de dados: {str(e)}")
        st.info("Tente ajustar os filtros ou recarregar a p√°gina.")
        
        # Exibir detalhes t√©cnicos do erro dentro de um expander para ajudar na depura√ß√£o
        with st.expander("Detalhes t√©cnicos do erro", expanded=False):
            st.code(f"{str(e)}")
            import traceback
            st.code(traceback.format_exc())
    
    # Informa√ß√µes adicionais
    with st.expander("Informa√ß√µes sobre o Plano de A√ß√£o"):
        st.markdown("""
        ### Como utilizar este plano de a√ß√£o:
        
        1. **Revise os riscos potenciais**: Verifique se os riscos descritos se aplicam √† sua realidade organizacional.
        
        2. **Ajuste as sugest√µes de a√ß√µes**: Modifique as a√ß√µes sugeridas conforme necess√°rio para adequ√°-las ao seu contexto.
        
        3. **Adicione solu√ß√µes espec√≠ficas**: Use o campo "Outras Solu√ß√µes" para incluir medidas personalizadas para sua organiza√ß√£o.
        
        4. **Defina respons√°veis e prazos**: Atribua claramente cada a√ß√£o a um respons√°vel e estabele√ßa prazos realistas.
        
        5. **Exporte o plano**: Use o bot√£o abaixo para exportar o plano completo para Excel e compartilhar com a equipe de SST.
        
        6. **Integre ao PGR**: Incorpore estas a√ß√µes ao Programa de Gerenciamento de Riscos da empresa.
        
        ### N√≠veis de prioridade recomendados:
        
        - **Risco Muito Alto** üî¥: Prioridade imediata (1-3 meses)
        - **Risco Alto** üü†: Prioridade alta (3-6 meses)
        - **Risco Moderado** üü°: Prioridade m√©dia (6-12 meses)
        - **Risco Baixo** üü¢: Prioridade baixa (12-18 meses)
        - **Risco Muito Baixo** üü£: Manuten√ß√£o de boas pr√°ticas (revis√£o anual)
        """)
    
    # Fun√ß√£o para exportar o plano para Excel
    def exportar_para_excel(df):
        output = io.BytesIO()
        
        try:
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                workbook = writer.book
                
                # Formatar e exportar o plano de a√ß√£o
                df.to_excel(writer, sheet_name='Plano de A√ß√£o HSE-IT', index=False)
                worksheet = writer.sheets['Plano de A√ß√£o HSE-IT']
                
                # Definir formatos
                header_format = workbook.add_format({
                    'bold': True,
                    'text_wrap': True,
                    'valign': 'top',
                    'fg_color': '#5A713D',
                    'font_color': 'white',
                    'border': 1
                })
                
                wrap_format = workbook.add_format({
                    'text_wrap': True,
                    'valign': 'top',
                    'border': 1
                })
                
                # Formatos para n√≠veis de risco
                risco_formats = {
                    'Risco Muito Alto üî¥': workbook.add_format({'bg_color': '#FF6B6B', 'bold': True, 'border': 1}),
                    'Risco Alto üü†': workbook.add_format({'bg_color': '#FFA500', 'bold': True, 'border': 1}),
                    'Risco Moderado üü°': workbook.add_format({'bg_color': '#FFFF00', 'border': 1}),
                    'Risco Baixo üü¢': workbook.add_format({'bg_color': '#90EE90', 'border': 1}),
                    'Risco Muito Baixo üü£': workbook.add_format({'bg_color': '#B0E0E6', 'border': 1})
                }
                
                # Configurar largura das colunas
                worksheet.set_column('A:A', 25)  # Dimens√£o
                worksheet.set_column('B:B', 10)  # M√©dia
                worksheet.set_column('C:C', 15)  # N√≠vel de Risco
                worksheet.set_column('D:D', 40)  # Riscos Potenciais
                worksheet.set_column('E:E', 50)  # Sugest√µes de A√ß√µes
                worksheet.set_column('F:F', 40)  # Outras Solu√ß√µes
                worksheet.set_column('G:G', 15)  # Respons√°vel
                worksheet.set_column('H:H', 15)  # Prazo
                
                # Adicionar cabe√ßalhos formatados
                for col_num, value in enumerate(df.columns.values):
                    worksheet.write(0, col_num, value, header_format)
                
                # Formatar c√©lulas com quebra de linha
                for row_num, (_, row) in enumerate(df.itertuples(), 1):
                    # Acesso seguro aos atributos
                    try:
                        # Obter valores com verifica√ß√£o de exist√™ncia
                        dimensao = getattr(row, "_1", "") if hasattr(row, "_1") else ""
                        media = getattr(row, "_2", 0) if hasattr(row, "_2") else 0
                        nivel_risco = getattr(row, "_3", "") if hasattr(row, "_3") else ""
                        riscos = getattr(row, "_4", "") if hasattr(row, "_4") else ""
                        sugestoes = getattr(row, "_5", "") if hasattr(row, "_5") else ""
                        outras = getattr(row, "_6", "") if hasattr(row, "_6") else ""
                        responsavel = getattr(row, "_7", "") if hasattr(row, "_7") else ""
                        prazo = getattr(row, "_8", "") if hasattr(row, "_8") else ""
                        
                        worksheet.write(row_num, 0, dimensao, wrap_format)  # Dimens√£o
                        worksheet.write(row_num, 1, media, wrap_format)  # M√©dia
                        
                        # Aplicar formatos de n√≠vel de risco
                        if nivel_risco in risco_formats:
                            worksheet.write(row_num, 2, nivel_risco, risco_formats[nivel_risco])
                        else:
                            # Verificar correspond√™ncia parcial
                            formato_encontrado = False
                            for key, formato in risco_formats.items():
                                if key.split()[0] in nivel_risco:
                                    worksheet.write(row_num, 2, nivel_risco, formato)
                                    formato_encontrado = True
                                    break
                            
                            if not formato_encontrado:
                                worksheet.write(row_num, 2, nivel_risco, wrap_format)
                        
                        worksheet.write(row_num, 3, riscos, wrap_format)  # Riscos Potenciais
                        worksheet.write(row_num, 4, sugestoes, wrap_format)  # Sugest√µes
                        worksheet.write(row_num, 5, outras, wrap_format)  # Outras Solu√ß√µes
                        worksheet.write(row_num, 6, responsavel, wrap_format)  # Respons√°vel
                        
                        # Tratamento especial para datas
                        if isinstance(prazo, (datetime, pd.Timestamp)):
                            prazo_str = prazo.strftime("%d/%m/%Y")
                            worksheet.write(row_num, 7, prazo_str, wrap_format)
                        else:
                            # Tentar converter string para data, se n√£o for None
                            if prazo:
                                prazo_str = padronizar_formato_data(prazo) or prazo
                                worksheet.write(row_num, 7, prazo_str, wrap_format)
                            else:
                                worksheet.write(row_num, 7, "", wrap_format)
                    except Exception as e:
                        print(f"Erro ao formatar linha {row_num}: {str(e)}")
                        # Continue com pr√≥xima linha mesmo se houver erro
                
                # Ajustar altura das linhas para acomodar conte√∫do
                for i in range(1, len(df) + 1):
                    worksheet.set_row(i, 80)  # Altura em pontos
                
                # Adicionar filtros
                worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)
                
                # Congelar a primeira linha
                worksheet.freeze_panes(1, 0)
                
                # Adicionar aba de instru√ß√µes
                worksheet_info = workbook.add_worksheet('Instru√ß√µes')
                title_format = workbook.add_format({
                    'bold': True,
                    'font_size': 14,
                    'align': 'center',
                    'valign': 'vcenter',
                    'fg_color': '#5A713D',
                    'font_color': 'white',
                    'border': 1
                })
                
                subtitle_format = workbook.add_format({
                    'bold': True,
                    'font_size': 12,
                    'fg_color': '#E8EDDF'
                })
                
                worksheet_info.set_column('A:A', 15)
                worksheet_info.set_column('B:B', 60)
                
                # T√≠tulo
                worksheet_info.merge_range('A1:B1', 'PLANO DE A√á√ÉO - HSE-IT: INSTRU√á√ïES', title_format)
                
                # Conte√∫do
                linha = 3
                worksheet_info.write(linha, 0, 'Objetivo:', subtitle_format)
                linha += 1
                worksheet_info.write(linha, 0, '')
                worksheet_info.write(linha, 1, 'Este plano de a√ß√£o cont√©m sugest√µes de medidas baseadas nos resultados da avalia√ß√£o HSE-IT. As sugest√µes devem ser adaptadas √† realidade da sua organiza√ß√£o e servir como ponto de partida para discuss√µes com a gest√£o e equipe de sa√∫de e seguran√ßa.')
                
                linha += 2
                worksheet_info.write(linha, 0, 'Como utilizar:', subtitle_format)
                linha += 1
                instrucoes = [
                    '1. Revise os riscos potenciais para verificar se se aplicam √† sua realidade organizacional.',
                    '2. Ajuste as sugest√µes de a√ß√µes conforme necess√°rio para adequ√°-las ao seu contexto.',
                    '3. Adicione solu√ß√µes espec√≠ficas no campo "Outras Solu√ß√µes".',
                    '4. Defina respons√°veis e prazos para cada a√ß√£o.',
                    '5. Integre as a√ß√µes ao Programa de Gerenciamento de Riscos (PGR) da empresa.',
                    '6. Monitore a implementa√ß√£o e efic√°cia das a√ß√µes ao longo do tempo.'
                ]
                
                for instrucao in instrucoes:
                    worksheet_info.write(linha, 1, instrucao)
                    linha += 1
                
                linha += 1
                worksheet_info.write(linha, 0, 'N√≠veis de risco:', subtitle_format)
                linha += 1
                
                niveis = [
                    {'nivel': 'Risco Muito Alto üî¥', 'descricao': 'Prioridade imediata. Requer interven√ß√£o em 1-3 meses.', 'formato': risco_formats['Risco Muito Alto üî¥']},
                    {'nivel': 'Risco Alto üü†', 'descricao': 'Prioridade alta. Implementar a√ß√µes em 3-6 meses.', 'formato': risco_formats['Risco Alto üü†']},
                    {'nivel': 'Risco Moderado üü°', 'descricao': 'Prioridade m√©dia. Implementar a√ß√µes em 6-12 meses.', 'formato': risco_formats['Risco Moderado üü°']},
                    {'nivel': 'Risco Baixo üü¢', 'descricao': 'Prioridade baixa. Implementar a√ß√µes em 12-18 meses.', 'formato': risco_formats['Risco Baixo üü¢']},
                    {'nivel': 'Risco Muito Baixo üü£', 'descricao': 'Manuten√ß√£o. Manter boas pr√°ticas e revisar anualmente.', 'formato': risco_formats['Risco Muito Baixo üü£']}
                ]
                
                for n in niveis:
                    worksheet_info.write(linha, 0, n['nivel'], n['formato'])
                    worksheet_info.write(linha, 1, n['descricao'])
                    linha += 1
                
                linha += 1
                worksheet_info.write(linha, 0, 'Observa√ß√µes:', subtitle_format)
                linha += 1
                worksheet_info.write(linha, 1, 'O plano de a√ß√£o deve ser revisado e aprovado pela equipe de Sa√∫de e Seguran√ßa do Trabalho e pela gest√£o da organiza√ß√£o.')
                linha += 1
                worksheet_info.write(linha, 1, 'As a√ß√µes devem ser implementadas conforme a prioridade definida, mas tamb√©m considerando a viabilidade pr√°tica e os recursos dispon√≠veis.')
                linha += 1
                worksheet_info.write(linha, 1, 'Recomenda-se revisar periodicamente o progresso das a√ß√µes e ajustar o plano conforme necess√°rio.')
                
                # Adicionar aba com dados de diagn√≥stico - CORRIGIDO: Verifica√ß√£o segura
                df_resultados = st.session_state.get("df_resultados")
                if df_resultados is not None and not df_resultados.empty:
                    try:
                        df_resultados.to_excel(writer, sheet_name='Diagn√≥stico HSE-IT', index=False)
                        worksheet_diag = writer.sheets['Diagn√≥stico HSE-IT']
                        
                        # Formatar cabe√ßalhos
                        for col_num, value in enumerate(df_resultados.columns.values):
                            worksheet_diag.write(0, col_num, value, header_format)
                        
                        # Configurar largura das colunas
                        worksheet_diag.set_column('A:A', 25)  # Dimens√£o
                        worksheet_diag.set_column('B:B', 40)  # Descri√ß√£o
                        worksheet_diag.set_column('C:C', 10)  # M√©dia
                        worksheet_diag.set_column('D:D', 15)  # Risco
                        worksheet_diag.set_column('E:E', 15)  # N√∫mero de Respostas
                        
                        # Formatar c√©lulas de risco
                        for row_num, row in enumerate(df_resultados.itertuples(), 1):
                            if hasattr(row, "Risco"):
                                nivel_risco = row.Risco
                                if nivel_risco in risco_formats:
                                    worksheet_diag.write(row_num, 3, nivel_risco, risco_formats[nivel_risco])
                    except Exception as e:
                        print(f"Erro ao adicionar aba de diagn√≥stico: {str(e)}")
                        # N√£o interromper por erro na aba de diagn√≥stico
            
            output.seek(0)
            return output
        
        except Exception as e:
            st.error(f"Erro ao gerar o arquivo Excel: {str(e)}")
            import traceback
            st.code(traceback.format_exc())
            return None
    
    # Bot√£o para exportar o plano em Excel
    col1, col2 = st.columns([1, 2])
    
    with col1:
        if st.button("Exportar para Excel", type="primary", use_container_width=True):
            # CORRIGIDO: Verifica√ß√£o segura do plano edit√°vel
            plano_a_exportar = st.session_state.get("plano_editavel")
            if plano_a_exportar is not None and not plano_a_exportar.empty:
                with st.spinner("Gerando Excel... Por favor, aguarde."):
                    data_atual = datetime.now().strftime("%d%m%Y")
                    excel_data = exportar_para_excel(plano_a_exportar)
                    
                    if excel_data:
                        st.success("Plano de a√ß√£o gerado com sucesso!")
                        # Salvar no estado da sess√£o para o bot√£o de download
                        st.session_state["excel_plano"] = excel_data
                        st.session_state["excel_plano_ready"] = True
                        st.balloons()  # Efeito visual para confirmar sucesso
            else:
                st.error("N√£o h√° plano de a√ß√£o para exportar. Verifique os filtros selecionados.")
    
    with col2:
        # CORRIGIDO: Verifica√ß√£o segura do estado do Excel
        if st.session_state.get("excel_plano_ready", False) and st.session_state.get("excel_plano") is not None:
            data_geracao = datetime.now().strftime("%d%m%Y")
            st.download_button(
                label="Baixar Plano de A√ß√£o HSE-IT",
                data=st.session_state["excel_plano"],
                file_name=f"plano_acao_hse_it_{data_geracao}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True,
                help="Baixe o arquivo Excel contendo o plano de a√ß√£o completo"
            )
        else:
            st.info("Clique em 'Exportar para Excel' para gerar o arquivo para download")
