import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
from fpdf import FPDF
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Avalia√ß√£o de Fatores Psicossociais - HSE-IT",
    page_icon="üìä",
    layout="wide"
)

# Fun√ß√£o para verificar senha (autentica√ß√£o b√°sica)
def check_password():
    """Retorna `True` se a senha estiver correta."""
    if "password_correct" not in st.session_state:
        st.session_state.password_correct = False

    if st.session_state.password_correct:
        return True

    # Formul√°rio de login
    with st.form("login_form"):
        st.text_input("Usu√°rio", key="username")
        st.text_input("Senha", type="password", key="password")
        submitted = st.form_submit_button("Login")

    if submitted:
        if st.session_state.password == "senha123" and st.session_state.username == "admin":
            st.session_state.password_correct = True
            return True
        else:
            st.error("Usu√°rio ou senha incorretos")
            return False
    return False

# Fun√ß√£o para classificar os riscos com base na pontua√ß√£o m√©dia
@st.cache_data
def classificar_risco(media):
    if media <= 1:
        return "Risco Muito Alto üî¥", "red"
    elif media > 1 and media <= 2:
        return "Risco Alto üü†", "orange"
    elif media > 2 and media <= 3:
        return "Risco Moderado üü°", "yellow"
    elif media > 3 and media <= 4:
        return "Risco Baixo üü¢", "green"
    else:
        return "Risco Muito Baixo üü£", "purple"

# Fun√ß√£o para carregar e processar dados
@st.cache_data
def carregar_dados(uploaded_file):
    # Determinar o tipo de arquivo e carreg√°-lo adequadamente
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file, sep=';' if ';' in uploaded_file.getvalue().decode('utf-8', errors='replace')[:1000] else ',')
    else:
        df = pd.read_excel(uploaded_file)
    
    # Separar os dados de filtro e as perguntas
    colunas_filtro = list(df.columns[:7])
    if "Carimbo de data/hora" in colunas_filtro:
        colunas_filtro.remove("Carimbo de data/hora")
    
    # Garantir que as colunas das perguntas s√£o corretamente identificadas
    colunas_perguntas = [col for col in df.columns if str(col).strip() and str(col).strip()[0].isdigit()]
    
    # Converter valores para num√©ricos, tratando erros
    df_perguntas = df[colunas_perguntas]
    for col in df_perguntas.columns:
        df_perguntas[col] = pd.to_numeric(df_perguntas[col], errors='coerce')
    
    return df, df_perguntas, colunas_filtro, colunas_perguntas

# Fun√ß√£o para calcular resultados
@st.cache_data
def calcular_resultados(df, df_perguntas_filtradas, fatores, colunas_perguntas):
    resultados = []
    cores = []
    
    # N√∫mero total de respostas ap√≥s filtragem
    num_total_respostas = len(df_perguntas_filtradas)
    
    for fator, perguntas in fatores.items():
        # Converter n√∫meros de pergunta para √≠ndices de coluna
        indices_validos = []
        for p in perguntas:
            for col in colunas_perguntas:
                if str(col).strip().startswith(str(p)):
                    indices_validos.append(col)
                    break
        
        if indices_validos:
            # Calcular m√©dia diretamente de todas as respostas para este fator
            valores = df_perguntas_filtradas[indices_validos].values.flatten()
            valores = valores[~pd.isna(valores)] # Remove NaN
            
            if len(valores) > 0:
                media = valores.mean()
                risco, cor = classificar_risco(media)
                resultados.append({
                    "Fator Psicossocial": fator,
                    "M√©dia": round(media, 2),
                    "Risco": risco,
                    "N√∫mero de Respostas": num_total_respostas
                })
                cores.append(cor)
    
    return resultados

# Fun√ß√£o para gerar sugest√µes de a√ß√µes com base no n√≠vel de risco
def gerar_sugestoes_acoes(df_resultados):
    # Dicion√°rio com sugest√µes de a√ß√µes para cada fator psicossocial por n√≠vel de risco
    sugestoes_por_fator = {
        "Gest√£o organizacional": {
            "Risco Muito Alto": [
                "Realizar auditoria completa dos processos de gest√£o organizacional",
                "Implementar plano de reestrutura√ß√£o da gest√£o com consultoria especializada",
                "Estabelecer canal direto e an√¥nimo para feedback sobre gest√£o",
                "Promover treinamento intensivo para l√≠deres em gest√£o de pessoas"
            ],
            "Risco Alto": [
                "Revisar processos decis√≥rios com participa√ß√£o dos colaboradores",
                "Implementar reuni√µes regulares de feedback entre gestores e equipes",
                "Capacitar l√≠deres em comunica√ß√£o efetiva e gest√£o participativa",
                "Criar comit√™ de desenvolvimento organizacional"
            ],
            "Risco Moderado": [
                "Mapear processos organizacionais para identificar melhorias",
                "Oferecer workshops de lideran√ßa para gestores intermedi√°rios",
                "Estabelecer m√©tricas de desempenho claras e transparentes"
            ],
            "Risco Baixo": [
                "Manter avalia√ß√£o peri√≥dica de clima organizacional",
                "Promover encontros regulares para compartilhamento de boas pr√°ticas",
                "Revisar anualmente pol√≠ticas e procedimentos organizacionais"
            ],
            "Risco Muito Baixo": [
                "Documentar as boas pr√°ticas de gest√£o para refer√™ncia futura",
                "Avaliar periodicamente a manuten√ß√£o das boas pr√°ticas de gest√£o"
            ]
        },
        "Viol√™ncia e ass√©dio moral/sexual no trabalho": {
            "Risco Muito Alto": [
                "Implementar imediatamente canal de den√∫ncias an√¥nimo e seguro",
                "Contratar consultoria especializada em preven√ß√£o de ass√©dio",
                "Realizar treinamento obrigat√≥rio sobre ass√©dio para todos os n√≠veis hier√°rquicos",
                "Estabelecer comit√™ de √©tica com participa√ß√£o de representantes dos trabalhadores",
                "Revisar processos disciplinares para casos de ass√©dio ou viol√™ncia"
            ],
            "Risco Alto": [
                "Desenvolver pol√≠tica espec√≠fica contra ass√©dio moral e sexual",
                "Realizar treinamentos sobre respeito no ambiente de trabalho",
                "Estabelecer procedimentos claros para den√∫ncias",
                "Promover campanhas de conscientiza√ß√£o sobre ass√©dio"
            ],
            "Risco Moderado": [
                "Realizar palestras sobre diversidade e respeito",
                "Revisar c√≥digo de conduta da empresa",
                "Implementar programa de media√ß√£o de conflitos"
            ],
            "Risco Baixo": [
                "Manter comunica√ß√£o peri√≥dica sobre canais de den√∫ncia",
                "Incluir temas de respeito e diversidade em treinamentos regulares"
            ],
            "Risco Muito Baixo": [
                "Avaliar periodicamente a efic√°cia das pol√≠ticas contra ass√©dio",
                "Compartilhar pr√°ticas bem-sucedidas com outras organiza√ß√µes"
            ]
        },
        "Contexto da organiza√ß√£o do trabalho": {
            "Risco Muito Alto": [
                "Realizar diagn√≥stico completo da organiza√ß√£o do trabalho com ajuda externa",
                "Redesenhar processos de trabalho com participa√ß√£o dos colaboradores",
                "Implementar ferramentas de gest√£o visual para clarificar fluxos de trabalho",
                "Revisar distribui√ß√£o de carga de trabalho entre equipes"
            ],
            "Risco Alto": [
                "Mapear e otimizar processos de trabalho cr√≠ticos",
                "Estabelecer reuni√µes estruturadas para clarificar pap√©is e responsabilidades",
                "Implementar metodologias √°geis para melhor organiza√ß√£o do trabalho",
                "Revisar pol√≠ticas de metas e prazos"
            ],
            "Risco Moderado": [
                "Promover workshops para identificar gargalos nos processos",
                "Implementar sistemas de gest√£o de tarefas",
                "Estabelecer canais de comunica√ß√£o eficientes entre departamentos"
            ],
            "Risco Baixo": [
                "Revisar periodicamente fluxos de trabalho",
                "Solicitar feedback regular sobre processos organizacionais"
            ],
            "Risco Muito Baixo": [
                "Documentar boas pr√°ticas de organiza√ß√£o do trabalho",
                "Compartilhar m√©todos bem-sucedidos entre departamentos"
            ]
        },
        "Caracter√≠sticas das rela√ß√µes sociais no trabalho": {
            "Risco Muito Alto": [
                "Implementar programa de desenvolvimento de rela√ß√µes interpessoais",
                "Realizar interven√ß√µes de team building com facilitadores externos",
                "Estabelecer pol√≠tica de comunica√ß√£o transparente e respeitosa",
                "Oferecer coaching para lideran√ßas com foco em relacionamentos"
            ],
            "Risco Alto": [
                "Promover atividades de integra√ß√£o entre equipes",
                "Implementar pr√°ticas de feedback construtivo",
                "Capacitar gestores em gest√£o de conflitos",
                "Estabelecer espa√ßos de di√°logo regulares"
            ],
            "Risco Moderado": [
                "Realizar eventos de reconhecimento e celebra√ß√£o",
                "Promover trabalhos em equipe multidisciplinares",
                "Implementar rituais de integra√ß√£o para novos colaboradores"
            ],
            "Risco Baixo": [
                "Manter calend√°rio de atividades sociais",
                "Incentivar comunica√ß√£o interdepartamental"
            ],
            "Risco Muito Baixo": [
                "Documentar pr√°ticas bem-sucedidas de relacionamento interpessoal",
                "Promover o compartilhamento de conhecimento entre equipes"
            ]
        },
        "Conte√∫do das tarefas do trabalho": {
            "Risco Muito Alto": [
                "Realizar an√°lise ergon√¥mica do trabalho (AET) completa",
                "Redesenhar fun√ß√µes com participa√ß√£o dos trabalhadores",
                "Implementar rota√ß√£o de tarefas para reduzir monotonia",
                "Estabelecer metas realistas com autonomia parcial"
            ],
            "Risco Alto": [
                "Revisar descri√ß√µes de cargos e fun√ß√µes",
                "Implementar reuni√µes para discutir melhorias nos processos",
                "Oferecer treinamentos para ampliar compet√™ncias",
                "Permitir personaliza√ß√£o parcial de m√©todos de trabalho"
            ],
            "Risco Moderado": [
                "Promover participa√ß√£o em projetos multidisciplinares",
                "Incentivar sugest√µes de melhorias nos processos",
                "Estabelecer momentos de feedback sobre conte√∫do do trabalho"
            ],
            "Risco Baixo": [
                "Avaliar periodicamente satisfa√ß√£o com tarefas desempenhadas",
                "Oferecer oportunidades de desenvolvimento profissional"
            ],
            "Risco Muito Baixo": [
                "Compartilhar boas pr√°ticas de desenho de fun√ß√£o",
                "Documentar casos de sucesso de enriquecimento de cargos"
            ]
        },
        "Discrimina√ß√£o no trabalho": {
            "Risco Muito Alto": [
                "Implementar pol√≠tica de diversidade e inclus√£o com metas mensur√°veis",
                "Realizar treinamento obrigat√≥rio sobre vieses inconscientes",
                "Estabelecer comit√™ de diversidade com representatividade",
                "Contratar consultoria especializada em equidade no trabalho",
                "Revisar processos de RH para eliminar potenciais fontes de discrimina√ß√£o"
            ],
            "Risco Alto": [
                "Desenvolver programa de conscientiza√ß√£o sobre diversidade",
                "Revisar pol√≠ticas de contrata√ß√£o e promo√ß√£o",
                "Implementar canal espec√≠fico para den√∫ncias de discrimina√ß√£o",
                "Realizar censo de diversidade para identificar gaps"
            ],
            "Risco Moderado": [
                "Promover palestras sobre diversidade e inclus√£o",
                "Celebrar datas comemorativas ligadas √† diversidade",
                "Incentivar grupos de afinidade"
            ],
            "Risco Baixo": [
                "Manter comunica√ß√£o regular sobre pol√≠ticas de diversidade",
                "Monitorar indicadores de diversidade e inclus√£o"
            ],
            "Risco Muito Baixo": [
                "Documentar e compartilhar boas pr√°ticas de inclus√£o",
                "Participar de f√≥runs externos sobre diversidade"
            ]
        },
        "Condi√ß√µes do ambiente de trabalho": {
            "Risco Muito Alto": [
                "Realizar avalia√ß√£o completa do ambiente f√≠sico de trabalho",
                "Implementar melhorias imediatas nas condi√ß√µes ambientais cr√≠ticas",
                "Estabelecer cronograma de adequa√ß√µes ergon√¥micas",
                "Oferecer op√ß√µes de trabalho remoto quando poss√≠vel",
                "Revisar layout dos espa√ßos de trabalho com participa√ß√£o dos trabalhadores"
            ],
            "Risco Alto": [
                "Realizar medi√ß√µes de ru√≠do, ilumina√ß√£o e temperatura",
                "Implementar programa de ergonomia",
                "Revisar mobili√°rio e equipamentos de trabalho",
                "Estabelecer momentos de pausa programada"
            ],
            "Risco Moderado": [
                "Promover campanhas de organiza√ß√£o e limpeza",
                "Implementar melhorias em √°reas de descanso",
                "Oferecer orienta√ß√µes sobre ergonomia"
            ],
            "Risco Baixo": [
                "Realizar check-ups peri√≥dicos das condi√ß√µes ambientais",
                "Incentivar sugest√µes de melhoria do ambiente"
            ],
            "Risco Muito Baixo": [
                "Documentar boas pr√°ticas ambientais",
                "Monitorar satisfa√ß√£o com o ambiente de trabalho"
            ]
        },
        "Intera√ß√£o pessoa-tarefa": {
            "Risco Muito Alto": [
                "Realizar an√°lise detalhada da adequa√ß√£o pessoa-fun√ß√£o",
                "Implementar programa de adequa√ß√£o de perfis √†s fun√ß√µes",
                "Oferecer treinamentos espec√≠ficos para desenvolvimento de compet√™ncias cr√≠ticas",
                "Estabelecer mentoria para fun√ß√µes complexas",
                "Revisar processos de sele√ß√£o interna e aloca√ß√£o de pessoal"
            ],
            "Risco Alto": [
                "Mapear compet√™ncias necess√°rias vs. dispon√≠veis",
                "Implementar programa de desenvolvimento individualizado",
                "Revisar sistemas de suporte √†s tarefas",
                "Estabelecer reuni√µes regulares de alinhamento"
            ],
            "Risco Moderado": [
                "Promover treinamentos para aprimoramento t√©cnico",
                "Implementar sistema de documenta√ß√£o de processos",
                "Estabelecer grupos de compartilhamento de pr√°ticas"
            ],
            "Risco Baixo": [
                "Manter programas de educa√ß√£o continuada",
                "Solicitar feedback sobre adequa√ß√£o pessoa-tarefa"
            ],
            "Risco Muito Baixo": [
                "Documentar casos de sucesso de adequa√ß√£o pessoa-tarefa",
                "Incentivar inova√ß√µes nos m√©todos de trabalho"
            ]
        },
        "Jornada de trabalho": {
            "Risco Muito Alto": [
                "Realizar diagn√≥stico completo de carga hor√°ria e distribui√ß√£o do trabalho",
                "Implementar pol√≠ticas de limita√ß√£o de horas extras",
                "Revisar escalas de trabalho com participa√ß√£o dos trabalhadores",
                "Estabelecer sistema de monitoramento de banco de horas",
                "Implementar medidas para evitar trabalho em hor√°rios de descanso"
            ],
            "Risco Alto": [
                "Revisar pol√≠ticas de jornada flex√≠vel",
                "Implementar sistema de compensa√ß√£o de horas",
                "Estabelecer limites claros para comunica√ß√£o fora do expediente",
                "Promover distribui√ß√£o equilibrada de tarefas"
            ],
            "Risco Moderado": [
                "Oferecer orienta√ß√µes sobre gest√£o do tempo",
                "Implementar pausas programadas",
                "Monitorar horas extras recorrentes"
            ],
            "Risco Baixo": [
                "Avaliar periodicamente satisfa√ß√£o com a jornada",
                "Manter op√ß√µes de flexibilidade hor√°ria"
            ],
            "Risco Muito Baixo": [
                "Documentar boas pr√°ticas de gest√£o de jornada",
                "Compartilhar casos de sucesso em equil√≠brio trabalho-vida"
            ]
        }
    }

    plano_acao = []

    # Para cada fator psicossocial no resultado
    for _, row in df_resultados.iterrows():
        fator = row['Fator Psicossocial']
        risco = row['Risco']
        nivel_risco = risco.split()[0] + " " + risco.split()[1]  # Ex: "Risco Alto"

        # Obter sugest√µes para este fator e n√≠vel de risco
        if fator in sugestoes_por_fator and nivel_risco in sugestoes_por_fator[fator]:
            sugestoes = sugestoes_por_fator[fator][nivel_risco]

            # Adicionar ao plano de a√ß√£o
            for sugestao in sugestoes:
                plano_acao.append({
                    "Fator Psicossocial": fator,
                    "N√≠vel de Risco": nivel_risco,
                    "M√©dia": row['M√©dia'],
                    "Sugest√£o de A√ß√£o": sugestao,
                    "Respons√°vel": "",
                    "Prazo": "",
                    "Status": "N√£o iniciada"
                })

    # Criar DataFrame com o plano de a√ß√£o
    df_plano_acao = pd.DataFrame(plano_acao)
    return df_plano_acao

# CORRE√á√ÉO: Fun√ß√£o formatar_aba_plano_acao corrigida
def formatar_aba_plano_acao(workbook, worksheet, df):
    # Definir formatos
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'valign': 'top',
        'fg_color': '#D7E4BC',
        'border': 1
    })

    risco_format = {
        'Risco Muito Alto': workbook.add_format({'bg_color': '#FF6B6B', 'font_color': 'white'}),
        'Risco Alto': workbook.add_format({'bg_color': '#FFA500'}),
        'Risco Moderado': workbook.add_format({'bg_color': '#FFFF00'}),
        'Risco Baixo': workbook.add_format({'bg_color': '#90EE90'}),
        'Risco Muito Baixo': workbook.add_format({'bg_color': '#BB8FCE'})
    }

    # Configurar largura das colunas
    worksheet.set_column('A:A', 25)  # Fator Psicossocial
    worksheet.set_column('B:B', 15)  # N√≠vel de Risco
    worksheet.set_column('C:C', 10)  # M√©dia
    worksheet.set_column('D:D', 50)  # Sugest√£o de A√ß√£o
    worksheet.set_column('E:E', 15)  # Respons√°vel
    worksheet.set_column('F:F', 15)  # Prazo
    worksheet.set_column('G:G', 15)  # Status

    # Adicionar cabe√ßalhos formatados
    for col_num, value in enumerate(df.columns.values):
        worksheet.write(0, col_num, value, header_format)

    # Aplicar formata√ß√£o condicional baseada no n√≠vel de risco
    # Usando iterrows em vez de itertuples para evitar problemas com nomes de colunas
    for row_num, (_, row) in enumerate(df.iterrows(), 1):
        nivel_risco = row["N√≠vel de Risco"]
        if nivel_risco in risco_format:
            worksheet.write(row_num, 1, nivel_risco, risco_format[nivel_risco])

    # Adicionar valida√ß√£o de dados para a coluna Status
    status_options = ['N√£o iniciada', 'Em andamento', 'Conclu√≠da', 'Cancelada']
    worksheet.data_validation('G2:G1000', {'validate': 'list',
                                         'source': status_options,
                                         'input_title': 'Selecione o status:',
                                         'input_message': 'Escolha um status da lista'})

    # Adicionar filtros
    worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)

    # Congelar painel para manter cabe√ßalhos vis√≠veis durante rolagem
    worksheet.freeze_panes(1, 0)

# Fun√ß√£o para formatar a aba Excel
def formatar_aba_excel(workbook, worksheet, df, is_pivot=False):
    # Definir formatos
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'valign': 'top',
        'fg_color': '#D7E4BC',
        'border': 1
    })

    # Configurar largura das colunas
    if not is_pivot:
        worksheet.set_column('A:A', 5)  # √çndice
        worksheet.set_column('B:B', 30)  # Fator Psicossocial
        worksheet.set_column('C:C', 10)  # M√©dia
        worksheet.set_column('D:D', 20)  # Risco
        worksheet.set_column('E:E', 15)  # N√∫mero de Respostas
    else:
        # Para tabelas pivotadas
        worksheet.set_column('A:A', 30)  # Fator Psicossocial
        for col in range(1, len(df.columns) + 1):
            worksheet.set_column(col, col, 12)  # Colunas de valores

    # Adicionar cabe√ßalhos formatados
    if not is_pivot:
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)
    
    # Adicionar filtros para tabelas n√£o pivotadas
    if not is_pivot:
        worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)
        
    # Congelar painel para manter cabe√ßalhos vis√≠veis
    worksheet.freeze_panes(1, 0)

# Fun√ß√£o para aplicar formata√ß√£o condicional em tabelas pivotadas
def aplicar_formatacao_condicional(workbook, worksheet, df_pivot):
    # Definir formatos para n√≠veis de risco
    risco_muito_alto = workbook.add_format({'bg_color': '#FF6B6B', 'font_color': 'white'})
    risco_alto = workbook.add_format({'bg_color': '#FFA500'})
    risco_moderado = workbook.add_format({'bg_color': '#FFFF00'})
    risco_baixo = workbook.add_format({'bg_color': '#90EE90'})
    risco_muito_baixo = workbook.add_format({'bg_color': '#BB8FCE'})
    
    # Aplicar formata√ß√£o condicional para todas as c√©lulas de dados
    for col in range(1, len(df_pivot.columns) + 1):
        for row in range(1, len(df_pivot) + 1):
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': '<=',
                'value': 1,
                'format': risco_muito_alto
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': 'between',
                'minimum': 1.01,
                'maximum': 2,
                'format': risco_alto
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': 'between',
                'minimum': 2.01,
                'maximum': 3,
                'format': risco_moderado
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': 'between',
                'minimum': 3.01,
                'maximum': 4,
                'format': risco_baixo
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': '>',
                'value': 4,
                'format': risco_muito_baixo
            })

# Fun√ß√£o para gerar o arquivo PDF do Plano de A√ß√£o
def gerar_pdf_plano_acao(df_plano_acao):
    try:
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        
        # Configurando fonte para suporte b√°sico
        pdf.set_font("Arial", style='B', size=16)
        
        # T√≠tulo
        pdf.cell(200, 10, "Plano de Acao - Fatores Psicossociais (HSE-IT)", ln=True, align='C')
        pdf.ln(10)
        
        # Data do relat√≥rio
        pdf.set_font("Arial", size=10)
        from datetime import datetime
        data_atual = datetime.now().strftime("%d/%m/%Y")
        pdf.cell(0, 10, f"Data do relatorio: {data_atual}", ln=True)
        pdf.ln(5)
        
        # Agrupar por fator psicossocial
        for fator in df_plano_acao["Fator Psicossocial"].unique():
            df_fator = df_plano_acao[df_plano_acao["Fator Psicossocial"] == fator]
            nivel_risco = df_fator["N√≠vel de Risco"].iloc[0]
            media = df_fator["M√©dia"].iloc[0]
            
            # T√≠tulo do fator
            pdf.set_font("Arial", style='B', size=12)
            pdf.cell(0, 10, f"{fator}", ln=True)
            
            # Informa√ß√µes de risco
            pdf.set_font("Arial", style='I', size=10)
            pdf.cell(0, 8, f"Media: {media} - Nivel de Risco: {nivel_risco}", ln=True)
            
            # A√ß√µes sugeridas
            pdf.set_font("Arial", size=10)
            pdf.cell(0, 6, "Acoes Sugeridas:", ln=True)
            
            for _, row in df_fator.iterrows():
                pdf.set_x(15)  # Recuo para lista
                pdf.cell(0, 6, f"- {row['Sugest√£o de A√ß√£o'].encode('ascii', 'replace').decode('ascii')}", ln=True)
            
            # Espa√ßo para tabela de respons√°veis e prazos
            pdf.ln(5)
            pdf.cell(0, 6, "Implementacao:", ln=True)
            
            # Criar tabela
            col_width = [100, 40, 40]
            pdf.set_font("Arial", style='B', size=8)
            
            # Cabe√ßalho da tabela
            pdf.set_x(15)
            pdf.cell(col_width[0], 7, "Acao", border=1)
            pdf.cell(col_width[1], 7, "Responsavel", border=1)
            pdf.cell(col_width[2], 7, "Prazo", border=1)
            pdf.ln()
            
            # Linhas da tabela
            pdf.set_font("Arial", size=8)
            for _, row in df_fator.iterrows():
                pdf.set_x(15)
                acao = row['Sugest√£o de A√ß√£o'].encode('ascii', 'replace').decode('ascii')
                
                # Verificar se o texto √© muito longo
                if len(acao) > 60:
                    acao = acao[:57] + "..."
                
                pdf.cell(col_width[0], 7, acao, border=1)
                pdf.cell(col_width[1], 7, "", border=1)
                pdf.cell(col_width[2], 7, "", border=1)
                pdf.ln()
            
            pdf.ln(10)
        
        # Adicionar informa√ß√µes sobre a interpreta√ß√£o dos riscos
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=11)
        pdf.cell(0, 8, "Legenda de Classificacao de Riscos:", ln=True)
        pdf.set_font("Arial", size=9)
        pdf.cell(0, 6, "Risco Muito Alto: Media <= 1", ln=True)
        pdf.cell(0, 6, "Risco Alto: 1 < Media <= 2", ln=True)
        pdf.cell(0, 6, "Risco Moderado: 2 < Media <= 3", ln=True)
        pdf.cell(0, 6, "Risco Baixo: 3 < Media <= 4", ln=True)
        pdf.cell(0, 6, "Risco Muito Baixo: Media > 4", ln=True)
        
        # Adicionar observa√ß√µes sobre o plano de a√ß√£o
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=11)
        pdf.cell(0, 8, "Observacoes:", ln=True)
        pdf.set_font("Arial", size=9)
        pdf.multi_cell(0, 6, "Este plano de acao foi gerado automaticamente com base nos resultados da avaliacao HSE-IT. As acoes sugeridas devem ser analisadas e adaptadas ao contexto especifico da organizacao. Recomenda-se definir responsaveis, prazos e indicadores de monitoramento para cada acao implementada.", 0)
        
        # Corrigindo o problema de BytesIO
        temp_file = "temp_plano_acao.pdf"
        pdf.output(temp_file)
        
        with open(temp_file, "rb") as file:
            output = io.BytesIO(file.read())
        
        import os
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o PDF do Plano de A√ß√£o: {str(e)}")
        return None

# Fun√ß√£o para gerar Excel completo com m√∫ltiplas abas
def gerar_excel_completo(df, df_perguntas, colunas_filtro, fatores, colunas_perguntas):
    output = io.BytesIO()
    
    try:
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            workbook = writer.book
            
            # Aba 1: Empresa Toda
            resultados_empresa = calcular_resultados(df, df_perguntas, fatores, colunas_perguntas)
            df_resultados_empresa = pd.DataFrame(resultados_empresa)
            df_resultados_empresa.to_excel(writer, sheet_name='Empresa Toda', index=False)
            
            # Formatar a planilha
            worksheet = writer.sheets['Empresa Toda']
            formatar_aba_excel(workbook, worksheet, df_resultados_empresa)
            
            # Aba 2: Plano de A√ß√£o
            df_plano_acao = gerar_sugestoes_acoes(df_resultados_empresa)
            df_plano_acao.to_excel(writer, sheet_name='Plano de A√ß√£o', index=False)
            
            # Formatar a aba de plano de a√ß√£o
            worksheet_plano = writer.sheets['Plano de A√ß√£o']
            formatar_aba_plano_acao(workbook, worksheet_plano, df_plano_acao)
            
            # Adicionar abas para cada tipo de filtro
            for filtro in colunas_filtro:
                if filtro != "Carimbo de data/hora":
                    valores_unicos = df[filtro].dropna().unique()
                    
                    # Criar uma aba resumo para este filtro
                    sheet_name = f'Por {filtro}'
                    if len(sheet_name) > 31:  # Excel limita nomes de abas a 31 caracteres
                        sheet_name = sheet_name[:31]
                    
                    # Criar DataFrame para o resumo deste filtro
                    resultados_resumo = []
                    
                    # Para cada valor √∫nico do filtro, calcular resultados
                    for valor in valores_unicos:
                        if pd.notna(valor):
                            df_filtrado = df[df[filtro] == valor]
                            indices_filtrados = df.index[df[filtro] == valor].tolist()
                            df_perguntas_filtradas = df_perguntas.loc[indices_filtrados]
                            
                            # Calcular resultados para este filtro
                            resultados_filtro = calcular_resultados(df_filtrado, df_perguntas_filtradas, fatores, colunas_perguntas)
                            
                            # Adicionar coluna com o valor do filtro
                            for res in resultados_filtro:
                                res[filtro] = valor
                                resultados_resumo.append(res)
                    
                    if resultados_resumo:
                        df_resumo = pd.DataFrame(resultados_resumo)
                        
                        # Pivotear para melhor visualiza√ß√£o
                        if len(resultados_resumo) > 0:
                            try:
                                df_pivot = df_resumo.pivot(index='Fator Psicossocial', columns=filtro, values='M√©dia')
                                df_pivot.to_excel(writer, sheet_name=sheet_name)
                                
                                # Formatar a planilha pivotada
                                worksheet = writer.sheets[sheet_name]
                                formatar_aba_excel(workbook, worksheet, df_pivot, is_pivot=True)
                                
                                # Adicionar informa√ß√£o de risco usando formata√ß√£o condicional
                                aplicar_formatacao_condicional(workbook, worksheet, df_pivot)
                            except Exception as e:
                                # Fallback caso pivot falhe
                                df_resumo.to_excel(writer, sheet_name=sheet_name, index=False)
                                worksheet = writer.sheets[sheet_name]
                                formatar_aba_excel(workbook, worksheet, df_resumo)
            
            # Adicionar aba com gr√°fico de resultados gerais
            adicionar_aba_grafico(writer, workbook, df_resultados_empresa)
        
        output.seek(0)
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o arquivo Excel: {str(e)}")
        return None

# Fun√ß√£o para adicionar uma aba com gr√°fico dos resultados
def adicionar_aba_grafico(writer, workbook, df_resultados):
    # Criar uma nova aba para o gr√°fico
    worksheet = workbook.add_worksheet('Gr√°fico de Riscos')
    
    # Adicionar os dados para o gr√°fico
    worksheet.write_column('A1', ['Fator Psicossocial'] + list(df_resultados['Fator Psicossocial']))
    worksheet.write_column('B1', ['M√©dia'] + list(df_resultados['M√©dia']))
    worksheet.write_column('C1', ['Risco'] + list(df_resultados['Risco']))
    
        # Criar o gr√°fico
    chart = workbook.add_chart({'type': 'bar'})
    
    # Configurar o gr√°fico
    chart.add_series({
        'name': 'M√©dia',
        'categories': ['Gr√°fico de Riscos', 1, 0, len(df_resultados), 0],
        'values': ['Gr√°fico de Riscos', 1, 1, len(df_resultados), 1],
        'data_labels': {'value': True},
        'fill': {'color': '#4472C4'}
    })
    
    # Configurar apar√™ncia do gr√°fico
    chart.set_title({'name': 'Fatores Psicossociais - Avalia√ß√£o de Riscos'})
    chart.set_x_axis({'name': 'Fator Psicossocial'})
    chart.set_y_axis({'name': 'M√©dia (1-5)', 'min': 0, 'max': 5})
    chart.set_legend({'position': 'bottom'})
    chart.set_size({'width': 720, 'height': 576})
    
    # Adicionar linhas de refer√™ncia para os n√≠veis de risco
    chart.set_y_axis({
        'name': 'M√©dia (1-5)',
        'min': 0,
        'max': 5,
        'major_gridlines': {'visible': True},
        'minor_gridlines': {'visible': False},
        'major_unit': 1
    })
    
    # Inserir o gr√°fico na planilha
    worksheet.insert_chart('E1', chart, {'x_scale': 1.5, 'y_scale': 1.5})
    
    # Adicionar legenda de interpreta√ß√£o dos riscos
    worksheet.write('A20', 'Interpreta√ß√£o dos Riscos:', workbook.add_format({'bold': True}))
    worksheet.write('A21', 'M√©dia ‚â§ 1: Risco Muito Alto')
    worksheet.write('A22', '1 < M√©dia ‚â§ 2: Risco Alto')
    worksheet.write('A23', '2 < M√©dia ‚â§ 3: Risco Moderado')
    worksheet.write('A24', '3 < M√©dia ‚â§ 4: Risco Baixo')
    worksheet.write('A25', 'M√©dia > 4: Risco Muito Baixo')

# Fun√ß√£o para gerar PDF do relat√≥rio
def gerar_pdf(df_resultados):
    try:
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        
        # Configurando fonte para suporte b√°sico
        pdf.set_font("Arial", style='B', size=14)
        
        # Usando strings sem acentos para evitar problemas de codifica√ß√£o
        pdf.cell(200, 10, "Relatorio de Fatores Psicossociais (HSE-IT)", ln=True, align='C')
        pdf.ln(10)
        
        pdf.set_font("Arial", size=12)
        
        for index, row in df_resultados.iterrows():
            # Remover acentos e caracteres especiais
            fator = row['Fator Psicossocial'].encode('ascii', 'replace').decode('ascii')
            risco = row['Risco'].split(' ')[0] + ' ' + row['Risco'].split(' ')[1]  # Remove emoji
            pdf.cell(0, 10, f"{fator}: {risco}", ln=True)
        
        # Adicionar informa√ß√µes sobre classifica√ß√£o de risco
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=12)
        pdf.cell(0, 10, "Legenda de Classificacao:", ln=True)
        pdf.set_font("Arial", size=10)
        pdf.cell(0, 8, "Risco Muito Alto: Media <= 1", ln=True)
        pdf.cell(0, 8, "Risco Alto: 1 < Media <= 2", ln=True)
        pdf.cell(0, 8, "Risco Moderado: 2 < Media <= 3", ln=True)
        pdf.cell(0, 8, "Risco Baixo: 3 < Media <= 4", ln=True)
        pdf.cell(0, 8, "Risco Muito Baixo: Media > 4", ln=True)
        
        # Corrigindo o problema de BytesIO
        temp_file = "temp_report.pdf"
        pdf.output(temp_file)
        
        with open(temp_file, "rb") as file:
            output = io.BytesIO(file.read())
        
        import os
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o PDF: {str(e)}")
        return None

# NOVA FUN√á√ÉO: Dashboard melhorado com visualiza√ß√µes mais ricas
def criar_dashboard(df_resultados, filtro_opcao, filtro_valor):
    st.markdown("## Dashboard de Riscos Psicossociais")
    
    # Layout com 3 m√©tricas principais
    col1, col2, col3 = st.columns(3)
    
    # Calcular m√©tricas
    media_geral = df_resultados["M√©dia"].mean()
    risco_geral, cor_geral = classificar_risco(media_geral)
    fator_mais_critico = df_resultados.loc[df_resultados["M√©dia"].idxmin()]
    fator_melhor = df_resultados.loc[df_resultados["M√©dia"].idxmax()]
    
    # Exibir m√©tricas com formata√ß√£o visual melhorada
    with col1:
        st.metric(
            label="M√©dia Geral",
            value=f"{media_geral:.2f}",
            delta=risco_geral.split()[0],
            delta_color="inverse"
        )
        st.markdown(f"<div style='text-align: center; color: {cor_geral};'><b>{risco_geral}</b></div>", unsafe_allow_html=True)
    
    with col2:
        st.metric(
            label="Fator Mais Cr√≠tico",
            value=fator_mais_critico["Fator Psicossocial"],
            delta=f"{fator_mais_critico['M√©dia']:.2f}",
            delta_color="off"
        )
        risco, cor = classificar_risco(fator_mais_critico["M√©dia"])
        st.markdown(f"<div style='text-align: center; color: {cor};'><b>{risco}</b></div>", unsafe_allow_html=True)
    
    with col3:
        st.metric(
            label="Fator Melhor Avaliado",
            value=fator_melhor["Fator Psicossocial"],
            delta=f"{fator_melhor['M√©dia']:.2f}",
            delta_color="off"
        )
        risco, cor = classificar_risco(fator_melhor["M√©dia"])
        st.markdown(f"<div style='text-align: center; color: {cor};'><b>{risco}</b></div>", unsafe_allow_html=True)
    
    # Criar gr√°fico de barras para visualiza√ß√£o dos riscos
    fig = criar_grafico_barras(df_resultados)
    st.plotly_chart(fig, use_container_width=True)
    
    return

# NOVA FUN√á√ÉO: Gr√°fico de barras melhorado usando Plotly
def criar_grafico_barras(df_resultados):
    # Ordenar resultados do menor para o maior (pior para melhor)
    df_sorted = df_resultados.sort_values(by="M√©dia")
    
    # Preparar dados para o gr√°fico
    cores = []
    hover_texts = []
    
    for media in df_sorted["M√©dia"]:
        _, cor = classificar_risco(media)
        cores.append(cor)
    
    for _, row in df_sorted.iterrows():
        hover_texts.append(f"Fator: {row['Fator Psicossocial']}<br>" +
                          f"M√©dia: {row['M√©dia']:.2f}<br>" +
                          f"Classifica√ß√£o: {row['Risco']}<br>" +
                          f"Respostas: {row['N√∫mero de Respostas']}")
    
    # Criar gr√°fico
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=df_sorted["M√©dia"],
        y=df_sorted["Fator Psicossocial"],
        orientation='h',
        marker_color=cores,
        text=[f"{v:.2f}" for v in df_sorted["M√©dia"]],
        textposition='outside',
        hovertext=hover_texts,
        hoverinfo='text'
    ))
    
    # Adicionar linhas verticais para n√≠veis de risco
    fig.add_shape(
        type="line",
        x0=1, y0=-0.5, x1=1, y1=len(df_resultados)-0.5,
        line=dict(color="Red", width=2, dash="dash")
    )
    
    fig.add_shape(
        type="line",
        x0=2, y0=-0.5, x1=2, y1=len(df_resultados)-0.5,
        line=dict(color="Orange", width=2, dash="dash")
    )
    
    fig.add_shape(
        type="line",
        x0=3, y0=-0.5, x1=3, y1=len(df_resultados)-0.5,
        line=dict(color="Yellow", width=2, dash="dash")
    )
    
    fig.add_shape(
        type="line",
        x0=4, y0=-0.5, x1=4, y1=len(df_resultados)-0.5,
        line=dict(color="Green", width=2, dash="dash")
    )
    
    # Adicionar anota√ß√µes para n√≠veis de risco
    fig.add_annotation(x=0.5, y=len(df_resultados), text="Risco Muito Alto", 
                      showarrow=False, font=dict(color="red"))
    fig.add_annotation(x=1.5, y=len(df_resultados), text="Risco Alto", 
                      showarrow=False, font=dict(color="orange"))
    fig.add_annotation(x=2.5, y=len(df_resultados), text="Risco Moderado", 
                      showarrow=False, font=dict(color="black"))
    fig.add_annotation(x=3.5, y=len(df_resultados), text="Risco Baixo", 
                      showarrow=False, font=dict(color="green"))
    fig.add_annotation(x=4.5, y=len(df_resultados), text="Risco Muito Baixo", 
                      showarrow=False, font=dict(color="purple"))
    
    # Configurar layout
    fig.update_layout(
        title=f"Classifica√ß√£o de Riscos Psicossociais",
        xaxis_title="M√©dia (Escala 1-5)",
        yaxis_title="Fator Psicossocial",
        xaxis=dict(range=[0, 5]),
        height=500,
        margin=dict(l=20, r=20, t=50, b=80)
    )
    
    return fig

# NOVA FUN√á√ÉO: Plano de a√ß√£o edit√°vel
def plano_acao_editavel(df_plano_acao):
    st.header("Plano de A√ß√£o Personalizado")
    st.write("Personalize o plano de a√ß√£o sugerido ou adicione suas pr√≥prias a√ß√µes.")
    
    # Inicializar plano de a√ß√£o no state se n√£o existir
    if "plano_acao_personalizado" not in st.session_state:
        st.session_state.plano_acao_personalizado = df_plano_acao.copy()
    
    # Criar tabs para cada fator psicossocial
    fatores_unicos = df_plano_acao["Fator Psicossocial"].unique()
    factor_tabs = st.tabs(fatores_unicos)
    
    # Para cada fator, criar um editor de a√ß√µes
    for i, fator in enumerate(fatores_unicos):
        with factor_tabs[i]:
            df_fator = st.session_state.plano_acao_personalizado[
                st.session_state.plano_acao_personalizado["Fator Psicossocial"] == fator
            ].copy()
            
            # Mostrar informa√ß√µes do fator
            nivel_risco = df_fator["N√≠vel de Risco"].iloc[0]
            media = df_fator["M√©dia"].iloc[0]
            
            # Definir cor com base no n√≠vel de risco
            cor = {
                "Risco Muito Alto": "red",
                "Risco Alto": "orange",
                "Risco Moderado": "yellow",
                "Risco Baixo": "green",
                "Risco Muito Baixo": "purple"
            }.get(nivel_risco, "gray")
            
            st.markdown(f"**M√©dia:** {media} - **N√≠vel de Risco:** :{cor}[{nivel_risco}]")
            
            # Adicionar nova a√ß√£o
            st.subheader("Adicionar Nova A√ß√£o:")
            col1, col2 = st.columns([3, 1])
            
            with col1:
                nova_acao = st.text_area("Descri√ß√£o da a√ß√£o", key=f"nova_acao_{fator}")
            
            with col2:
                st.write("&nbsp;")  # Espa√ßamento
                adicionar = st.button("Adicionar", key=f"add_{fator}")
                
                if adicionar and nova_acao.strip():
                    # Criar nova linha para o DataFrame
                    nova_linha = {
                        "Fator Psicossocial": fator,
                        "N√≠vel de Risco": nivel_risco,
                        "M√©dia": media,
                        "Sugest√£o de A√ß√£o": nova_acao,
                        "Respons√°vel": "",
                        "Prazo": "",
                        "Status": "N√£o iniciada",
                        "Personalizada": True  # Marcar como a√ß√£o personalizada
                    }
                    
                    # Adicionar ao DataFrame
                    st.session_state.plano_acao_personalizado = pd.concat([
                        st.session_state.plano_acao_personalizado, 
                        pd.DataFrame([nova_linha])
                    ], ignore_index=True)
                    
                    # Limpar campo de texto
                    st.session_state[f"nova_acao_{fator}"] = ""
                    st.experimental_rerun()
            
            # Mostrar a√ß√µes existentes para editar
            st.subheader("A√ß√µes Sugeridas:")
            for j, (index, row) in enumerate(df_fator.iterrows()):
                with st.expander(f"A√ß√£o {j+1}: {row['Sugest√£o de A√ß√£o'][:50]}...", expanded=False):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        # Editor de texto para a a√ß√£o
                        acao_editada = st.text_area(
                            "Descri√ß√£o da a√ß√£o", 
                            row["Sugest√£o de A√ß√£o"], 
                            key=f"acao_{fator}_{j}"
                        )
                        if acao_editada != row["Sugest√£o de A√ß√£o"]:
                            st.session_state.plano_acao_personalizado.at[index, "Sugest√£o de A√ß√£o"] = acao_editada
                    
                    with col2:
                        # Campos para respons√°vel, prazo e status
                        responsavel = st.text_input(
                            "Respons√°vel", 
                            row.get("Respons√°vel", ""), 
                            key=f"resp_{fator}_{j}"
                        )
                        if responsavel != row.get("Respons√°vel", ""):
                            st.session_state.plano_acao_personalizado.at[index, "Respons√°vel"] = responsavel
                        
                        # Campo de data para prazo
                        try:
                            data_padrao = None
                            if row.get("Prazo") and row.get("Prazo") != "":
                                try:
                                    data_padrao = datetime.strptime(row.get("Prazo"), "%d/%m/%Y")
                                except:
                                    data_padrao = None
                            
                            prazo = st.date_input(
                                "Prazo", 
                                value=data_padrao,
                                key=f"prazo_{fator}_{j}"
                            )
                            if prazo:
                                st.session_state.plano_acao_personalizado.at[index, "Prazo"] = prazo.strftime("%d/%m/%Y")
                        except Exception as e:
                            st.warning(f"Erro ao processar data: {e}")
                        
                        # Seletor de status
                        status = st.selectbox(
                            "Status",
                            options=["N√£o iniciada", "Em andamento", "Conclu√≠da", "Cancelada"],
                            index=["N√£o iniciada", "Em andamento", "Conclu√≠da", "Cancelada"].index(row.get("Status", "N√£o iniciada")),
                            key=f"status_{fator}_{j}"
                        )
                        if status != row.get("Status", "N√£o iniciada"):
                            st.session_state.plano_acao_personalizado.at[index, "Status"] = status
                        
                        # Bot√£o para remover (apenas para a√ß√µes personalizadas)
                        if row.get("Personalizada", False):
                            if st.button("üóëÔ∏è Remover", key=f"del_{fator}_{j}"):
                                st.session_state.plano_acao_personalizado = st.session_state.plano_acao_personalizado.drop(index)
                                st.experimental_rerun()
    
    # Bot√£o para exportar plano personalizado
    if st.button("Exportar Plano de A√ß√£o Personalizado"):
        # Gerar Excel com o plano personalizado
        output = gerar_excel_plano_personalizado(st.session_state.plano_acao_personalizado)
        if output:
            st.success("Plano de A√ß√£o gerado com sucesso!")
            st.download_button(
                label="Baixar Plano de A√ß√£o Personalizado",
                data=output,
                file_name="plano_acao_personalizado.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

# NOVA FUN√á√ÉO: Gerar excel do plano personalizado
def gerar_excel_plano_personalizado(df_plano_personalizado):
    output = io.BytesIO()
    
    try:
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            workbook = writer.book
            
            # Aba principal com o plano de a√ß√£o
            df_plano_personalizado = df_plano_personalizado.copy()
            
            # Remover coluna Personalizada antes de exportar
            if "Personalizada" in df_plano_personalizado.columns:
                df_plano_personalizado = df_plano_personalizado.drop(columns=["Personalizada"])
                
            df_plano_personalizado.to_excel(writer, sheet_name='Plano de A√ß√£o', index=False)
            
            # Formatar a aba
            worksheet = writer.sheets['Plano de A√ß√£o']
            
            # Definir formatos
            header_format = workbook.add_format({
                'bold': True,
                'text_wrap': True,
                'valign': 'top',
                'fg_color': '#D7E4BC',
                'border': 1
            })

            risco_format = {
                'Risco Muito Alto': workbook.add_format({'bg_color': '#FF6B6B', 'font_color': 'white'}),
                'Risco Alto': workbook.add_format({'bg_color': '#FFA500'}),
                'Risco Moderado': workbook.add_format({'bg_color': '#FFFF00'}),
                'Risco Baixo': workbook.add_format({'bg_color': '#90EE90'}),
                'Risco Muito Baixo': workbook.add_format({'bg_color': '#BB8FCE'})
            }
            
            # Configurar largura das colunas
            worksheet.set_column('A:A', 25)  # Fator Psicossocial
            worksheet.set_column('B:B', 15)  # N√≠vel de Risco
            worksheet.set_column('C:C', 10)  # M√©dia
            worksheet.set_column('D:D', 50)  # Sugest√£o de A√ß√£o
            worksheet.set_column('E:E', 15)  # Respons√°vel
            worksheet.set_column('F:F', 15)  # Prazo
            worksheet.set_column('G:G', 15)  # Status
            
            # Adicionar cabe√ßalhos formatados
            for col_num, value in enumerate(df_plano_personalizado.columns.values):
                worksheet.write(0, col_num, value, header_format)
            
            # Aplicar formata√ß√£o condicional baseada no n√≠vel de risco
            for row_num, (_, row) in enumerate(df_plano_personalizado.iterrows(), 1):
                nivel_risco = row["N√≠vel de Risco"]
                if nivel_risco in risco_format:
                    worksheet.write(row_num, 1, nivel_risco, risco_format[nivel_risco])
            
            # Adicionar valida√ß√£o de dados para a coluna Status
            status_options = ['N√£o iniciada', 'Em andamento', 'Conclu√≠da', 'Cancelada']
            worksheet.data_validation('G2:G1000', {'validate': 'list',
                                                'source': status_options,
                                                'input_title': 'Selecione o status:',
                                                'input_message': 'Escolha um status da lista'})
            
            # Adicionar filtros
            worksheet.autofilter(0, 0, len(df_plano_personalizado), len(df_plano_personalizado.columns) - 1)
            
            # Congelar painel para manter cabe√ßalhos vis√≠veis durante rolagem
            worksheet.freeze_panes(1, 0)
        
        output.seek(0)
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o arquivo Excel: {str(e)}")
        return None

# Verificar autentica√ß√£o antes de mostrar o conte√∫do
if check_password():
    # Criar sistema de abas para melhor organiza√ß√£o
    tabs = st.tabs(["Upload de Dados", "Resultados", "Plano de A√ß√£o", "Relat√≥rios"])

    # Primeira aba - Upload e configura√ß√£o
    with tabs[0]:
        st.title("Avalia√ß√£o de Fatores Psicossociais - HSE-IT")
        st.write("Fa√ßa upload do arquivo Excel contendo os resultados do question√°rio.")
        
        # Adiciona uma explica√ß√£o sobre o formato esperado do arquivo
        with st.expander("Informa√ß√µes sobre o formato do arquivo"):
            st.write("""
            O arquivo deve conter:
            - Colunas de filtro (Setor, Cargo, etc.) nas primeiras 7 colunas
            - Colunas com as perguntas numeradas (come√ßando com n√∫meros)
            - As respostas devem ser valores num√©ricos de 1 a 5
            """)
        
        uploaded_file = st.file_uploader("Escolha um arquivo Excel", type=["xlsx", "csv"])
        
        # Barra lateral para filtros e configura√ß√µes
        with st.sidebar:
            st.header("Filtros e Configura√ß√µes")
            
            # Inicializar vari√°veis para evitar erros
            df_resultados = None
            df_plano_acao = None
            filtro_opcao = "Empresa Toda"
            filtro_valor = "Geral"
            
            if uploaded_file is not None:
                try:
                    # Carregar dados
                    df, df_perguntas, colunas_filtro, colunas_perguntas = carregar_dados(uploaded_file)
                    
                    # Criar op√ß√µes de filtro
                    opcoes_filtro = ["Empresa Toda"] + [col for col in colunas_filtro if col != "Carimbo de data/hora"]
                    
                    filtro_opcao = st.selectbox("Filtrar por", opcoes_filtro)
                    
                    filtro_valor = "Geral"
                    df_filtrado = df
                    
                    if filtro_opcao != "Empresa Toda":
                        valores_unicos = df[filtro_opcao].dropna().unique()
                        if len(valores_unicos) > 0:
                            filtro_valor = st.selectbox(f"Escolha um {filtro_opcao}", valores_unicos)
                            df_filtrado = df[df[filtro_opcao] == filtro_valor]
                            
                            # Filtrar as perguntas de acordo com o filtro
                            indices_filtrados = df.index[df[filtro_opcao] == filtro_valor].tolist()
                            df_perguntas_filtradas = df_perguntas.loc[indices_filtrados]
                        else:
                            st.warning(f"N√£o h√° valores √∫nicos para o filtro '{filtro_opcao}'.")
                    else:
                        df_perguntas_filtradas = df_perguntas
                    
                    # Definir fatores psicossociais
                    fatores = {
                        "Gest√£o organizacional": [15, 19, 25, 26, 28, 32],
                        "Viol√™ncia e ass√©dio moral/sexual no trabalho": [5, 14, 21, 34],
                        "Contexto da organiza√ß√£o do trabalho": [3, 6, 9, 1, 4, 11, 13, 8, 27, 31, 35],
                        "Caracter√≠sticas das rela√ß√µes sociais no trabalho": [7, 24, 27, 31, 5, 14, 21, 34],
                        "Conte√∫do das tarefas do trabalho": [6, 9, 12, 18, 20, 22],
                        "Discrimina√ß√£o no trabalho": [14, 21],
                        "Condi√ß√µes do ambiente de trabalho": [5, 6, 14, 21, 34],
                        "Intera√ß√£o pessoa-tarefa": [10, 19, 6, 9, 12, 20],
                        "Jornada de trabalho": [16, 18, 30]
                    }
                    
                    # Calcular resultados
                    resultados = calcular_resultados(df_filtrado, df_perguntas_filtradas, fatores, colunas_perguntas)
                    df_resultados = pd.DataFrame(resultados)
                    
                    # Armazenar no session_state para acesso em outras abas
                    st.session_state.df_resultados = df_resultados
                    st.session_state.df = df
                    st.session_state.df_perguntas = df_perguntas
                    st.session_state.colunas_filtro = colunas_filtro
                    st.session_state.colunas_perguntas = colunas_perguntas
                    st.session_state.fatores = fatores
                    st.session_state.filtro_opcao = filtro_opcao
                    st.session_state.filtro_valor = filtro_valor
                    
                    # Gerar plano de a√ß√£o
                    df_plano_acao = gerar_sugestoes_acoes(df_resultados)
                    st.session_state.df_plano_acao = df_plano_acao
                    
                except Exception as e:
                    st.error(f"Ocorreu um erro inesperado: {str(e)}")
                    st.write("Detalhes do erro para debug:")
                    st.exception(e)
    
    # Segunda aba - Visualiza√ß√£o de resultados
    with tabs[1]:
        if "df_resultados" in st.session_state and st.session_state.df_resultados is not None:
            df_resultados = st.session_state.df_resultados
            filtro_opcao = st.session_state.filtro_opcao
            filtro_valor = st.session_state.filtro_valor
            
            # Mostrar dashboard melhorado
            criar_dashboard(df_resultados, filtro_opcao, filtro_valor)
            
            st.write("### Resultados Detalhados da Avalia√ß√£o")
            st.dataframe(df_resultados)
            
            # Adicionar um bot√£o para exportar os resultados detalhados
            csv = df_resultados.to_csv(index=False)
            st.download_button(
                label="Baixar Resultados CSV",
                data=csv,
                file_name=f"resultados_{filtro_opcao}_{filtro_valor}.csv",
                mime="text/csv",
            )
    
    # Terceira aba - Plano de a√ß√£o
    with tabs[2]:
        if "df_plano_acao" in st.session_state and st.session_state.df_plano_acao is not None:
            # Mostrar o plano de a√ß√£o edit√°vel (nova funcionalidade)
            plano_acao_editavel(st.session_state.df_plano_acao)
    
    # Quarta aba - Relat√≥rios
    with tabs[3]:
        if "df_resultados" in st.session_state and st.session_state.df_resultados is not None:
            st.header("Download de Relat√≥rios")
            
            # Recuperar dados do session_state
            df = st.session_state.df
            df_perguntas = st.session_state.df_perguntas
            colunas_filtro = st.session_state.colunas_filtro
            colunas_perguntas = st.session_state.colunas_perguntas
            fatores = st.session_state.fatores
            df_resultados = st.session_state.df_resultados
            df_plano_acao = st.session_state.df_plano_acao
            filtro_opcao = st.session_state.filtro_opcao
            filtro_valor = st.session_state.filtro_valor
            
            col1, col2 = st.columns(2)
            
            # Usar a fun√ß√£o para gerar Excel com m√∫ltiplas abas e plano de a√ß√£o
            excel_data = gerar_excel_completo(df, df_perguntas, colunas_filtro, fatores, colunas_perguntas)
            if excel_data:
                with col1:
                    st.download_button(
                        label="Baixar Relat√≥rio Excel Completo",
                        data=excel_data,
                        file_name=f"relatorio_completo_hse.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        help="Baixe um relat√≥rio Excel com m√∫ltiplas abas contendo an√°lises por empresa, setor, cargo, etc. e o plano de a√ß√£o sugerido."
                    )
            
            # Gerar PDF da an√°lise
            pdf_data = gerar_pdf(df_resultados)
            if pdf_data:
                with col2:
                    st.download_button(
                        label="Baixar Relat√≥rio PDF",
                        data=pdf_data,
                        file_name=f"relatorio_hse_{filtro_opcao}_{filtro_valor}.pdf",
                        mime="application/pdf"
                    )
            
            # Adicionar op√ß√£o para baixar o PDF do Plano de A√ß√£o
            pdf_plano_acao = gerar_pdf_plano_acao(df_plano_acao)
            if pdf_plano_acao:
                st.download_button(
                    label="Baixar Plano de A√ß√£o PDF",
                    data=pdf_plano_acao,
                    file_name=f"plano_acao_hse_{filtro_opcao}_{filtro_valor}.pdf",
                    mime="application/pdf",
                    help="Baixe um PDF espec√≠fico com o plano de a√ß√£o sugerido, incluindo campos para preenchimento de respons√°veis e prazos."
                )
            
            # Adicionar op√ß√£o para baixar o Template HSE-IT
            with st.expander("Baixar Template para Coleta de Dados HSE-IT"):
                st.write("""
                Baixe o template para utilizar na coleta de dados do question√°rio HSE-IT.
                Este arquivo Excel cont√©m a estrutura adequada para ser utilizada com este sistema.
                """)
                
                # Fun√ß√£o para gerar um template b√°sico
                def gerar_template_excel():
                    output = io.BytesIO()
                    
                    # Criar DataFrame com a estrutura esperada
                    colunas = [
                        "Setor", "Cargo", "Tempo_Empresa", "Genero", "Faixa_Etaria", "Escolaridade", "Regime_Trabalho",
                    ]
                    
                    # Adicionar colunas de perguntas
                    for i in range(1, 36):
                        colunas.append(f"{i}. Pergunta sobre fator psicossocial")
                    
                    df_template = pd.DataFrame(columns=colunas)
                    
                    # Adicionar linha de exemplo
                    df_template.loc[0] = ["TI", "Analista", "1-3 anos", "Masculino", "25-35", "Superior", "CLT"] + [3] * 35
                    
                    # Exportar para Excel
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        df_template.to_excel(writer, sheet_name="Question√°rio HSE-IT", index=False)
                        
                        # Criar folha de instru√ß√µes
                        workbook = writer.book
                        worksheet_instrucoes = workbook.add_worksheet("Instru√ß√µes")
                        
                        # Adicionar instru√ß√µes
                        instrucoes = [
                            "Template para Question√°rio HSE-IT",
                            "",
                            "Instru√ß√µes de uso:",
                            "",
                            "1. As primeiras 7 colunas cont√™m informa√ß√µes demogr√°ficas",
                            "2. As demais colunas (35) cont√™m as perguntas do question√°rio HSE-IT",
                            "3. As respostas devem ser preenchidas com valores de 1 a 5, onde:",
                            "   - 1: Nunca / Discordo totalmente",
                            "   - 2: Raramente / Discordo parcialmente",
                            "   - 3: √Äs vezes / Nem concordo nem discordo",
                            "   - 4: Frequentemente / Concordo parcialmente",
                            "   - 5: Sempre / Concordo totalmente",
                            "",
                            "4. √â importante manter a estrutura exata deste template",
                            "5. As perguntas devem come√ßar com o n√∫mero e um ponto (ex: '1. Pergunta...')",
                            "",
                            "Para mais informa√ß√µes, consulte a documenta√ß√£o ou entre em contato."
                        ]
                        
                        # Escrever instru√ß√µes
                        for i, texto in enumerate(instrucoes):
                            worksheet_instrucoes.write(i, 0, texto)
                    
                    output.seek(0)
                    return output
                
                # Bot√£o para download do template
                st.download_button(
                    label="Baixar Template Excel",
                    data=gerar_template_excel(),
                    file_name="template_hse_it.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
                
            # Adicionar informa√ß√µes sobre como usar os relat√≥rios
            with st.expander("Como usar os relat√≥rios"):
                st.write("""
                ### Relat√≥rio Excel Completo
                Cont√©m m√∫ltiplas abas com an√°lises detalhadas:
                - **Empresa Toda**: Vis√£o geral dos fatores psicossociais
                - **Plano de A√ß√£o**: Sugest√µes de a√ß√µes para cada fator de risco
                - **Por Setor/Cargo/etc.**: An√°lises segmentadas por filtros demogr√°ficos
                - **Gr√°fico de Riscos**: Visualiza√ß√£o gr√°fica dos fatores
                
                ### Relat√≥rio PDF
                Vers√£o simplificada com os principais resultados, ideal para compartilhamento.
                
                ### Plano de A√ß√£o PDF
                Documento espec√≠fico com as a√ß√µes sugeridas, contendo espa√ßos para preenchimento
                manual de respons√°veis e prazos. Ideal para discuss√£o em reuni√µes de planejamento.
                """)
                
else:
    st.stop()  # N√£o mostrar nada abaixo deste ponto se a autentica√ß√£o falhar
