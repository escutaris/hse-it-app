import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import io
from fpdf import FPDF
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Avalia√ß√£o de Fatores Psicossociais - HSE-IT",
    page_icon="üìä",
    layout="wide"
)

# Fun√ß√£o para verificar senha (autentica√ß√£o b√°sica)
def check_password():
    """Retorna `True` se a senha estiver correta."""
    if "password_correct" not in st.session_state:
        st.session_state.password_correct = False

    if st.session_state.password_correct:
        return True

    # Formul√°rio de login
    with st.form("login_form"):
        st.text_input("Usu√°rio", key="username")
        st.text_input("Senha", type="password", key="password")
        submitted = st.form_submit_button("Login")

    if submitted:
        if st.session_state.password == "senha123" and st.session_state.username == "admin":
            st.session_state.password_correct = True
            return True
        else:
            st.error("Usu√°rio ou senha incorretos")
            return False
    return False

# Definir as quest√µes invertidas do HSE-IT
QUESTOES_INVERTIDAS = [3, 5, 6, 9, 12, 14, 16, 18, 20, 21, 22, 34]

# Definir os fatores do HSE-IT (dimens√µes originais)
DIMENSOES_HSE = {
    "Demanda": [3, 6, 9, 12, 16, 18, 20, 22],
    "Controle": [2, 10, 15, 19, 25, 30],
    "Apoio da Chefia": [8, 23, 29, 33, 35],
    "Apoio dos Colegas": [7, 24, 27, 31],
    "Relacionamentos": [5, 14, 21, 34],
    "Fun√ß√£o": [1, 4, 11, 13, 17],
    "Mudan√ßa": [26, 28, 32]
}

# Descri√ß√µes das dimens√µes para informa√ß√£o do usu√°rio
DESCRICOES_DIMENSOES = {
    "Demanda": "Inclui aspectos como carga de trabalho, padr√µes e ambiente de trabalho.",
    "Controle": "Refere-se a quanto controle a pessoa tem sobre como realiza seu trabalho.",
    "Apoio da Chefia": "O incentivo, patroc√≠nio e recursos fornecidos pela organiza√ß√£o e lideran√ßa.",
    "Apoio dos Colegas": "O incentivo, patroc√≠nio e recursos fornecidos pelos colegas.",
    "Relacionamentos": "Inclui a promo√ß√£o de trabalho positivo para evitar conflitos e lidar com comportamentos inaceit√°veis.",
    "Fun√ß√£o": "Se as pessoas entendem seu papel na organiza√ß√£o e se a organiza√ß√£o garante que n√£o tenham pap√©is conflitantes.",
    "Mudan√ßa": "Como as mudan√ßas organizacionais s√£o gerenciadas e comunicadas."
}

# Fun√ß√£o para classificar os riscos com base na pontua√ß√£o m√©dia
@st.cache_data
def classificar_risco(media):
    if media <= 1:
        return "Risco Muito Alto üî¥", "red"
    elif media > 1 and media <= 2:
        return "Risco Alto üü†", "orange"
    elif media > 2 and media <= 3:
        return "Risco Moderado üü°", "yellow"
    elif media > 3 and media <= 4:
        return "Risco Baixo üü¢", "green"
    else:
        return "Risco Muito Baixo üü£", "purple"

# Fun√ß√£o para carregar e processar dados
@st.cache_data
def carregar_dados(uploaded_file):
    # Determinar o tipo de arquivo e carreg√°-lo adequadamente
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file, sep=';' if ';' in uploaded_file.getvalue().decode('utf-8', errors='replace')[:1000] else ',')
    else:
        df = pd.read_excel(uploaded_file)
    
    # Separar os dados de filtro e as perguntas
    colunas_filtro = list(df.columns[:7])
    if "Carimbo de data/hora" in colunas_filtro:
        colunas_filtro.remove("Carimbo de data/hora")
    
    # Garantir que as colunas das perguntas s√£o corretamente identificadas
    colunas_perguntas = [col for col in df.columns if str(col).strip() and str(col).strip()[0].isdigit()]
    
    # Converter valores para num√©ricos, tratando erros
    df_perguntas = df[colunas_perguntas]
    for col in df_perguntas.columns:
        df_perguntas[col] = pd.to_numeric(df_perguntas[col], errors='coerce')
    
    return df, df_perguntas, colunas_filtro, colunas_perguntas

# Fun√ß√£o para processar os dados (incluindo invers√£o de quest√µes)
def processar_dados_hse(df_perguntas, colunas_perguntas):
    # Copiar o dataframe para n√£o modificar o original
    df_processado = df_perguntas.copy()
    
    # Inverter a pontua√ß√£o das quest√µes invertidas
    for col in colunas_perguntas:
        # Extrair o n√∫mero da quest√£o (considerar que o formato √© "1. Pergunta")
        try:
            numero_questao = int(str(col).strip().split('.')[0])
            if numero_questao in QUESTOES_INVERTIDAS:
                df_processado[col] = 6 - df_processado[col]  # Inverte a escala (1->5, 2->4, 3->3, 4->2, 5->1)
        except (ValueError, IndexError):
            continue
    
    return df_processado

# Fun√ß√£o para calcular resultados por dimens√£o
@st.cache_data
def calcular_resultados_dimensoes(df, df_perguntas_filtradas, colunas_perguntas):
    # Processar dados (inverter quest√µes necess√°rias)
    df_processado = processar_dados_hse(df_perguntas_filtradas, colunas_perguntas)
    
    resultados = []
    cores = []
    
    # N√∫mero total de respostas ap√≥s filtragem
    num_total_respostas = len(df_processado)
    
    # Calcular resultados para cada dimens√£o
    for dimensao, numeros_questoes in DIMENSOES_HSE.items():
        # Converter n√∫meros de pergunta para √≠ndices de coluna
        indices_validos = []
        for q in numeros_questoes:
            for col in colunas_perguntas:
                if str(col).strip().startswith(str(q) + ".") or str(col).strip().startswith(str(q) + " "):
                    indices_validos.append(col)
                    break
        
        if indices_validos:
            # Calcular m√©dia para esta dimens√£o
            valores = df_processado[indices_validos].values.flatten()
            valores = valores[~pd.isna(valores)]  # Remove NaN
            
            if len(valores) > 0:
                media = valores.mean()
                risco, cor = classificar_risco(media)
                
                resultados.append({
                    "Dimens√£o": dimensao,
                    "Descri√ß√£o": DESCRICOES_DIMENSOES[dimensao],
                    "M√©dia": round(media, 2),
                    "Risco": risco,
                    "N√∫mero de Respostas": num_total_respostas,
                    "Quest√µes": numeros_questoes
                })
                cores.append(cor)
    
    return resultados

# Fun√ß√£o para gerar sugest√µes de a√ß√µes com base no n√≠vel de risco
def gerar_sugestoes_acoes(df_resultados):
    # Dicion√°rio com sugest√µes de a√ß√µes para cada dimens√£o por n√≠vel de risco
    sugestoes_por_dimensao = {
        "Demanda": {
            "Risco Muito Alto": [
                "Realizar auditoria completa da distribui√ß√£o de carga de trabalho",
                "Implementar sistema de gest√£o de tarefas e prioriza√ß√£o",
                "Reavaliar prazos e expectativas de produtividade",
                "Contratar pessoal adicional para √°reas sobrecarregadas",
                "Implementar pausas obrigat√≥rias durante o dia de trabalho"
            ],
            "Risco Alto": [
                "Mapear atividades e identificar gargalos de processo",
                "Implementar ferramentas para melhor organiza√ß√£o e planejamento do trabalho",
                "Revisar e ajustar prazos de entregas e metas",
                "Capacitar gestores em gerenciamento de carga de trabalho das equipes"
            ],
            "Risco Moderado": [
                "Promover treinamentos de gest√£o do tempo e prioriza√ß√£o",
                "Revisar distribui√ß√£o de tarefas entre membros da equipe",
                "Estabelecer momentos regulares para feedback sobre carga de trabalho"
            ],
            "Risco Baixo": [
                "Manter monitoramento regular das demandas de trabalho",
                "Realizar check-ins peri√≥dicos sobre volume de trabalho",
                "Oferecer recursos de apoio para per√≠odos de pico de trabalho"
            ],
            "Risco Muito Baixo": [
                "Documentar boas pr√°ticas atuais de gest√£o de demandas",
                "Compartilhar casos de sucesso no gerenciamento de carga de trabalho",
                "Manter pr√°ticas de gest√£o de demandas e continuar monitorando"
            ]
        },
        "Controle": {
            "Risco Muito Alto": [
                "Redesenhar processos para aumentar a autonomia dos trabalhadores",
                "Implementar esquemas de trabalho flex√≠vel",
                "Revisar pol√≠ticas de microgerenciamento",
                "Treinar gestores em delega√ß√£o efetiva",
                "Criar espa√ßos para participa√ß√£o em decis√µes estrat√©gicas"
            ],
            "Risco Alto": [
                "Identificar √°reas espec√≠ficas onde os trabalhadores podem ter mais controle",
                "Envolver colaboradores no planejamento de metas e m√©todos de trabalho",
                "Implementar sistema de sugest√µes para melhorias nos processos",
                "Oferecer op√ß√µes de hor√°rios flex√≠veis"
            ],
            "Risco Moderado": [
                "Aumentar gradualmente a autonomia nas decis√µes rotineiras",
                "Solicitar feedback regular sobre n√≠vel de controle no trabalho",
                "Implementar projetos-piloto para testar maior autonomia"
            ],
            "Risco Baixo": [
                "Manter boas pr√°ticas de autonomia",
                "Revisar periodicamente √°reas onde o controle pode ser ampliado",
                "Reconhecer e celebrar iniciativas independentes"
            ],
            "Risco Muito Baixo": [
                "Documentar pr√°ticas bem-sucedidas de autonomia",
                "Compartilhar casos de sucesso com outras √°reas da organiza√ß√£o",
                "Manter cultura de confian√ßa e delega√ß√£o"
            ]
        },
        "Apoio da Chefia": {
            "Risco Muito Alto": [
                "Implementar programa estruturado de desenvolvimento de lideran√ßas",
                "Realizar avalia√ß√£o 360¬∞ para gestores",
                "Estabelecer canais de comunica√ß√£o direta entre colaboradores e alta dire√ß√£o",
                "Revisar pol√≠ticas de promo√ß√£o para garantir que bons l√≠deres sejam reconhecidos",
                "Oferecer coaching individual para gestores com desafios espec√≠ficos"
            ],
            "Risco Alto": [
                "Treinar gestores em habilidades de suporte e feedback",
                "Implementar reuni√µes regulares one-on-one entre l√≠deres e liderados",
                "Estabelecer expectativas claras para comportamentos de lideran√ßa",
                "Criar f√≥runs para l√≠deres compartilharem desafios e solu√ß√µes"
            ],
            "Risco Moderado": [
                "Revisar e melhorar as pr√°ticas de feedback das lideran√ßas",
                "Oferecer recursos e ferramentas para l√≠deres apoiarem suas equipes",
                "Promover workshops sobre comunica√ß√£o efetiva"
            ],
            "Risco Baixo": [
                "Manter programas de desenvolvimento de lideran√ßas",
                "Reconhecer e celebrar boas pr√°ticas de lideran√ßa",
                "Implementar sistema de mentoria entre l√≠deres"
            ],
            "Risco Muito Baixo": [
                "Documentar e compartilhar pr√°ticas exemplares de lideran√ßa",
                "Utilizar l√≠deres como mentores para novos gestores",
                "Manter cultura de apoio e desenvolvimento cont√≠nuo"
            ]
        },
        "Apoio dos Colegas": {
            "Risco Muito Alto": [
                "Implementar programas estruturados de team building",
                "Revisar a composi√ß√£o e din√¢mica das equipes",
                "Estabelecer facilitadores de equipe para melhorar integra√ß√£o",
                "Criar espa√ßos f√≠sicos e virtuais para colabora√ß√£o",
                "Implementar sistema de reconhecimento por comportamentos colaborativos"
            ],
            "Risco Alto": [
                "Promover atividades regulares de integra√ß√£o de equipes",
                "Treinar em habilidades de trabalho em equipe e comunica√ß√£o",
                "Estabelecer objetivos compartilhados que incentivem a colabora√ß√£o",
                "Revisar processos que possam estar criando competi√ß√£o indesejada"
            ],
            "Risco Moderado": [
                "Implementar reuni√µes regulares de equipe para compartilhamento",
                "Criar projetos colaborativos entre diferentes membros",
                "Oferecer oportunidades para pessoas se conhecerem melhor"
            ],
            "Risco Baixo": [
                "Manter momentos regulares de integra√ß√£o",
                "Monitorar din√¢micas de equipe, especialmente com novos membros",
                "Reconhecer comportamentos de apoio entre colegas"
            ],
            "Risco Muito Baixo": [
                "Documentar boas pr√°ticas de colabora√ß√£o",
                "Utilizar a cultura de apoio como exemplo para novos funcion√°rios",
                "Manter ambiente de confian√ßa e colabora√ß√£o"
            ]
        },
        "Relacionamentos": {
            "Risco Muito Alto": [
                "Implementar pol√≠tica de toler√¢ncia zero para ass√©dio e comportamentos inadequados",
                "Criar canais confidenciais para den√∫ncias",
                "Treinar todos os colaboradores em respeito e diversidade",
                "Estabelecer media√ß√£o de conflitos com profissionais externos",
                "Auditar clima organizacional e relacionamentos interpessoais"
            ],
            "Risco Alto": [
                "Desenvolver e comunicar pol√≠tica clara sobre comportamentos aceit√°veis",
                "Treinar gestores na identifica√ß√£o e gest√£o de conflitos",
                "Implementar processos estruturados para resolu√ß√£o de conflitos",
                "Promover di√°logo aberto sobre relacionamentos saud√°veis no trabalho"
            ],
            "Risco Moderado": [
                "Realizar workshops sobre comunica√ß√£o n√£o-violenta",
                "Estabelecer acordos de equipe sobre comportamentos esperados",
                "Promover atividades que construam confian√ßa entre colegas"
            ],
            "Risco Baixo": [
                "Manter comunica√ß√£o regular sobre respeito no ambiente de trabalho",
                "Incorporar avalia√ß√£o de relacionamentos nas pesquisas de clima",
                "Reconhecer exemplos positivos de resolu√ß√£o de conflitos"
            ],
            "Risco Muito Baixo": [
                "Documentar boas pr√°ticas de relacionamentos saud√°veis",
                "Utilizar a cultura positiva como diferencial da organiza√ß√£o",
                "Manter monitoramento cont√≠nuo do clima relacional"
            ]
        },
        "Fun√ß√£o": {
            "Risco Muito Alto": [
                "Realizar revis√£o completa de descri√ß√µes de cargos e responsabilidades",
                "Implementar processo de clarifica√ß√£o de fun√ß√µes para toda a organiza√ß√£o",
                "Treinar gestores em delega√ß√£o clara e defini√ß√£o de expectativas",
                "Estabelecer processos para resolver conflitos de pap√©is e responsabilidades",
                "Revisar estrutura organizacional para eliminar ambiguidades"
            ],
            "Risco Alto": [
                "Revisar e atualizar descri√ß√µes de cargo",
                "Implementar reuni√µes regulares para esclarecer expectativas",
                "Criar matriz RACI (Respons√°vel, Aprovador, Consultado, Informado) para projetos",
                "Treinar equipes em comunica√ß√£o sobre pap√©is e responsabilidades"
            ],
            "Risco Moderado": [
                "Revisar processos onde ocorrem conflitos de fun√ß√µes",
                "Promover workshops para clarificar interfaces entre √°reas",
                "Estabelecer f√≥runs para discutir e esclarecer pap√©is em projetos"
            ],
            "Risco Baixo": [
                "Manter atualiza√ß√µes peri√≥dicas de responsabilidades",
                "Incluir clareza de pap√©is nas avalia√ß√µes de desempenho",
                "Promover comunica√ß√£o cont√≠nua sobre expectativas"
            ],
            "Risco Muito Baixo": [
                "Documentar boas pr√°ticas de clareza de fun√ß√µes",
                "Utilizar como modelo para novos departamentos ou projetos",
                "Manter cultura de transpar√™ncia sobre pap√©is e responsabilidades"
            ]
        },
        "Mudan√ßa": {
            "Risco Muito Alto": [
                "Implementar metodologia estruturada de gest√£o de mudan√ßas",
                "Criar comit√™ representativo para planejamento de mudan√ßas",
                "Estabelecer m√∫ltiplos canais de comunica√ß√£o sobre processos de mudan√ßa",
                "Treinar gestores em lideran√ßa durante transforma√ß√µes",
                "Avaliar impacto de mudan√ßas anteriores e implementar li√ß√µes aprendidas"
            ],
            "Risco Alto": [
                "Desenvolver plano de comunica√ß√£o para mudan√ßas organizacionais",
                "Envolver representantes de diferentes n√≠veis no planejamento",
                "Implementar feedbacks regulares durante processos de mudan√ßa",
                "Oferecer suporte adicional para equipes mais afetadas"
            ],
            "Risco Moderado": [
                "Melhorar a transpar√™ncia sobre raz√µes das mudan√ßas",
                "Criar f√≥runs para esclarecer d√∫vidas sobre transforma√ß√µes",
                "Celebrar pequenas vit√≥rias durante processos de mudan√ßa"
            ],
            "Risco Baixo": [
                "Manter comunica√ß√£o proativa sobre poss√≠veis mudan√ßas",
                "Oferecer oportunidades regulares para feedback durante transforma√ß√µes",
                "Reconhecer contribui√ß√µes positivas em processos de mudan√ßa"
            ],
            "Risco Muito Baixo": [
                "Documentar pr√°ticas bem-sucedidas de gest√£o de mudan√ßas",
                "Utilizar abordagem participativa como padr√£o",
                "Manter cultura de adaptabilidade e melhoria cont√≠nua"
            ]
        }
    }

    plano_acao = []

    # Para cada dimens√£o no resultado
    for _, row in df_resultados.iterrows():
        dimensao = row['Dimens√£o']
        risco = row['Risco']
        nivel_risco = risco.split()[0] + " " + risco.split()[1]  # Ex: "Risco Alto"

        # Obter sugest√µes para esta dimens√£o e n√≠vel de risco
        if dimensao in sugestoes_por_dimensao and nivel_risco in sugestoes_por_dimensao[dimensao]:
            sugestoes = sugestoes_por_dimensao[dimensao][nivel_risco]

            # Adicionar ao plano de a√ß√£o
            for sugestao in sugestoes:
                plano_acao.append({
                    "Dimens√£o": dimensao,
                    "N√≠vel de Risco": nivel_risco,
                    "M√©dia": row['M√©dia'],
                    "Sugest√£o de A√ß√£o": sugestao,
                    "Respons√°vel": "",
                    "Prazo": "",
                    "Status": "N√£o iniciada"
                })

    # Criar DataFrame com o plano de a√ß√£o
    df_plano_acao = pd.DataFrame(plano_acao)
    return df_plano_acao

# Fun√ß√£o para formatar aba do plano de a√ß√£o
def formatar_aba_plano_acao(workbook, worksheet, df):
    # Definir formatos
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'valign': 'top',
        'fg_color': '#D7E4BC',
        'border': 1
    })

    risco_format = {
        'Risco Muito Alto': workbook.add_format({'bg_color': '#FF6B6B', 'font_color': 'white'}),
        'Risco Alto': workbook.add_format({'bg_color': '#FFA500'}),
        'Risco Moderado': workbook.add_format({'bg_color': '#FFFF00'}),
        'Risco Baixo': workbook.add_format({'bg_color': '#90EE90'}),
        'Risco Muito Baixo': workbook.add_format({'bg_color': '#BB8FCE'})
    }

    # Configurar largura das colunas
    worksheet.set_column('A:A', 25)  # Dimens√£o
    worksheet.set_column('B:B', 15)  # N√≠vel de Risco
    worksheet.set_column('C:C', 10)  # M√©dia
    worksheet.set_column('D:D', 50)  # Sugest√£o de A√ß√£o
    worksheet.set_column('E:E', 15)  # Respons√°vel
    worksheet.set_column('F:F', 15)  # Prazo
    worksheet.set_column('G:G', 15)  # Status

    # Adicionar cabe√ßalhos formatados
    for col_num, value in enumerate(df.columns.values):
        worksheet.write(0, col_num, value, header_format)

    # Aplicar formata√ß√£o condicional baseada no n√≠vel de risco
    for row_num, (_, row) in enumerate(df.iterrows(), 1):
        nivel_risco = row["N√≠vel de Risco"]
        if nivel_risco in risco_format:
            worksheet.write(row_num, 1, nivel_risco, risco_format[nivel_risco])

    # Adicionar valida√ß√£o de dados para a coluna Status
    status_options = ['N√£o iniciada', 'Em andamento', 'Conclu√≠da', 'Cancelada']
    worksheet.data_validation('G2:G1000', {'validate': 'list',
                                         'source': status_options,
                                         'input_title': 'Selecione o status:',
                                         'input_message': 'Escolha um status da lista'})

    # Adicionar filtros
    worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)

    # Congelar painel para manter cabe√ßalhos vis√≠veis durante rolagem
    worksheet.freeze_panes(1, 0)

# Fun√ß√£o para formatar a aba Excel
def formatar_aba_excel(workbook, worksheet, df, is_pivot=False):
    # Definir formatos
    header_format = workbook.add_format({
        'bold': True,
        'text_wrap': True,
        'valign': 'top',
        'fg_color': '#D7E4BC',
        'border': 1
    })

    # Configurar largura das colunas
    if not is_pivot:
        worksheet.set_column('A:A', 5)  # √çndice
        worksheet.set_column('B:B', 25)  # Dimens√£o
        worksheet.set_column('C:C', 40)  # Descri√ß√£o
        worksheet.set_column('D:D', 10)  # M√©dia
        worksheet.set_column('E:E', 20)  # Risco
        worksheet.set_column('F:F', 15)  # N√∫mero de Respostas
    else:
        # Para tabelas pivotadas
        worksheet.set_column('A:A', 25)  # Dimens√£o
        for col in range(1, len(df.columns) + 1):
            worksheet.set_column(col, col, 12)  # Colunas de valores

    # Adicionar cabe√ßalhos formatados
    if not is_pivot:
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)
    
    # Adicionar filtros para tabelas n√£o pivotadas
    if not is_pivot:
        worksheet.autofilter(0, 0, len(df), len(df.columns) - 1)
        
    # Congelar painel para manter cabe√ßalhos vis√≠veis
    worksheet.freeze_panes(1, 0)

# Fun√ß√£o para aplicar formata√ß√£o condicional em tabelas pivotadas
def aplicar_formatacao_condicional(workbook, worksheet, df_pivot):
    # Definir formatos para n√≠veis de risco
    risco_muito_alto = workbook.add_format({'bg_color': '#FF6B6B', 'font_color': 'white'})
    risco_alto = workbook.add_format({'bg_color': '#FFA500'})
    risco_moderado = workbook.add_format({'bg_color': '#FFFF00'})
    risco_baixo = workbook.add_format({'bg_color': '#90EE90'})
    risco_muito_baixo = workbook.add_format({'bg_color': '#BB8FCE'})
    
    # Aplicar formata√ß√£o condicional para todas as c√©lulas de dados
    for col in range(1, len(df_pivot.columns) + 1):
        for row in range(1, len(df_pivot) + 1):
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': '<=',
                'value': 1,
                'format': risco_muito_alto
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': 'between',
                'minimum': 1.01,
                'maximum': 2,
                'format': risco_alto
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': 'between',
                'minimum': 2.01,
                'maximum': 3,
                'format': risco_moderado
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': 'between',
                'minimum': 3.01,
                'maximum': 4,
                'format': risco_baixo
            })
            worksheet.conditional_format(row, col, row, col, {
                'type': 'cell',
                'criteria': '>',
                'value': 4,
                'format': risco_muito_baixo
            })

# Fun√ß√£o para gerar o arquivo PDF do Plano de A√ß√£o
def gerar_pdf_plano_acao(df_plano_acao):
    try:
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        
        # Configurando fonte para suporte b√°sico
        pdf.set_font("Arial", style='B', size=16)
        
        # T√≠tulo
        pdf.cell(200, 10, "Plano de Acao - HSE-IT: Fatores Psicossociais", ln=True, align='C')
        pdf.ln(10)
        
        # Data do relat√≥rio
        pdf.set_font("Arial", size=10)
        data_atual = datetime.now().strftime("%d/%m/%Y")
        pdf.cell(0, 10, f"Data do relatorio: {data_atual}", ln=True)
        pdf.ln(5)
        
        # Agrupar por dimens√£o
        for dimensao in df_plano_acao["Dimens√£o"].unique():
            df_dimensao = df_plano_acao[df_plano_acao["Dimens√£o"] == dimensao]
            nivel_risco = df_dimensao["N√≠vel de Risco"].iloc[0]
            media = df_dimensao["M√©dia"].iloc[0]
            
            # T√≠tulo da dimens√£o
            pdf.set_font("Arial", style='B', size=12)
            pdf.cell(0, 10, f"{dimensao}", ln=True)
            
            # Adicionar descri√ß√£o da dimens√£o
            pdf.set_font("Arial", style='I', size=10)
            pdf.multi_cell(0, 6, DESCRICOES_DIMENSOES[dimensao], 0)
            
            # Informa√ß√µes de risco
            pdf.set_font("Arial", style='I', size=10)
            pdf.cell(0, 8, f"Media: {media} - Nivel de Risco: {nivel_risco}", ln=True)
            
            # A√ß√µes sugeridas
            pdf.set_font("Arial", size=10)
            pdf.cell(0, 6, "Acoes Sugeridas:", ln=True)
            
            for _, row in df_dimensao.iterrows():
                pdf.set_x(15)  # Recuo para lista
                pdf.cell(0, 6, f"- {row['Sugest√£o de A√ß√£o'].encode('ascii', 'replace').decode('ascii')}", ln=True)
            
            # Espa√ßo para tabela de respons√°veis e prazos
            pdf.ln(5)
            pdf.cell(0, 6, "Implementacao:", ln=True)
            
            # Criar tabela
            col_width = [100, 40, 40]
            pdf.set_font("Arial", style='B', size=8)
            
            # Cabe√ßalho da tabela
            pdf.set_x(15)
            pdf.cell(col_width[0], 7, "Acao", border=1)
            pdf.cell(col_width[1], 7, "Responsavel", border=1)
            pdf.cell(col_width[2], 7, "Prazo", border=1)
            pdf.ln()
            
            # Linhas da tabela
            pdf.set_font("Arial", size=8)
            for _, row in df_dimensao.iterrows():
                pdf.set_x(15)
                acao = row['Sugest√£o de A√ß√£o'].encode('ascii', 'replace').decode('ascii')
                
                # Verificar se o texto √© muito longo
                if len(acao) > 60:
                    acao = acao[:57] + "..."
                
                pdf.cell(col_width[0], 7, acao, border=1)
                pdf.cell(col_width[1], 7, "", border=1)
                pdf.cell(col_width[2], 7, "", border=1)
                pdf.ln()
            
            pdf.ln(10)
        
        # Adicionar informa√ß√µes sobre a interpreta√ß√£o dos riscos
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=11)
        pdf.cell(0, 8, "Legenda de Classificacao de Riscos:", ln=True)
        pdf.set_font("Arial", size=9)
        pdf.cell(0, 6, "Risco Muito Alto: Media <= 1", ln=True)
        pdf.cell(0, 6, "Risco Alto: 1 < Media <= 2", ln=True)
        pdf.cell(0, 6, "Risco Moderado: 2 < Media <= 3", ln=True)
        pdf.cell(0, 6, "Risco Baixo: 3 < Media <= 4", ln=True)
        pdf.cell(0, 6, "Risco Muito Baixo: Media > 4", ln=True)
        
        # Adicionar observa√ß√µes sobre o plano de a√ß√£o
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=11)
        pdf.cell(0, 8, "Observacoes:", ln=True)
        pdf.set_font("Arial", size=9)
        pdf.multi_cell(0, 6, "Este plano de acao foi gerado automaticamente com base nos resultados da avaliacao HSE-IT. As acoes sugeridas devem ser analisadas e adaptadas ao contexto especifico da organizacao. Recomenda-se definir responsaveis, prazos e indicadores de monitoramento para cada acao implementada.", 0)
        
        pdf.multi_cell(0, 6, "O questionario HSE-IT avalia 7 dimensoes de fatores psicossociais no trabalho: Demanda, Controle, Apoio da Chefia, Apoio dos Colegas, Relacionamentos, Funcao e Mudanca. Priorize as acoes nas dimensoes com maior risco.", 0)
        
        # Corrigindo o problema de BytesIO
        temp_file = "temp_plano_acao.pdf"
        pdf.output(temp_file)
        
        with open(temp_file, "rb") as file:
            output = io.BytesIO(file.read())
        
        import os
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o PDF do Plano de A√ß√£o: {str(e)}")
        return None

# Fun√ß√£o para gerar Excel completo com m√∫ltiplas abas
def gerar_excel_completo(df, df_perguntas, colunas_filtro, colunas_perguntas):
    output = io.BytesIO()
    
    try:
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            workbook = writer.book
            
            # Aba 1: Empresa Toda - Dimens√µes
            resultados_empresa = calcular_resultados_dimensoes(df, df_perguntas, colunas_perguntas)
            df_resultados_empresa = pd.DataFrame(resultados_empresa)
            
            # Remover a coluna de quest√µes para o Excel (mant√©m a visualiza√ß√£o mais limpa)
            df_resultados_excel = df_resultados_empresa.copy()
            if 'Quest√µes' in df_resultados_excel.columns:
                df_resultados_excel = df_resultados_excel.drop(columns=['Quest√µes'])
            
            df_resultados_excel.to_excel(writer, sheet_name='Empresa Toda', index=False)
            
            # Formatar a planilha
            worksheet = writer.sheets['Empresa Toda']
            formatar_aba_excel(workbook, worksheet, df_resultados_excel)
            
            # Aba 2: Plano de A√ß√£o
            df_plano_acao = gerar_sugestoes_acoes(df_resultados_empresa)
            df_plano_acao.to_excel(writer, sheet_name='Plano de A√ß√£o', index=False)
            
            # Formatar a aba de plano de a√ß√£o
            worksheet_plano = writer.sheets['Plano de A√ß√£o']
            formatar_aba_plano_acao(workbook, worksheet_plano, df_plano_acao)
            
            # Aba 3: Detalhes das Quest√µes (explica√ß√£o da metodologia)
            worksheet_detalhes = workbook.add_worksheet('Detalhes das Dimens√µes')
            
            # Cabe√ßalhos
            headers = ["Dimens√£o", "Quest√µes", "Descri√ß√£o"]
            for col, header in enumerate(headers):
                worksheet_detalhes.write(0, col, header, workbook.add_format({'bold': True, 'bg_color': '#D7E4BC'}))
            
            # Configurar largura das colunas
            worksheet_detalhes.set_column('A:A', 20)  # Dimens√£o
            worksheet_detalhes.set_column('B:B', 30)  # Quest√µes
            worksheet_detalhes.set_column('C:C', 50)  # Descri√ß√£o
            
            # Preencher dados
            row = 1
            for dimensao, questoes in DIMENSOES_HSE.items():
                worksheet_detalhes.write(row, 0, dimensao)
                worksheet_detalhes.write(row, 1, str(questoes))
                worksheet_detalhes.write(row, 2, DESCRICOES_DIMENSOES[dimensao])
                row += 1
            
            # Adicionar abas para cada tipo de filtro
            for filtro in colunas_filtro:
                if filtro != "Carimbo de data/hora":
                    valores_unicos = df[filtro].dropna().unique()
                    
                    # Criar uma aba resumo para este filtro
                    sheet_name = f'Por {filtro}'
                    if len(sheet_name) > 31:  # Excel limita nomes de abas a 31 caracteres
                        sheet_name = sheet_name[:31]
                    
                    # Criar DataFrame para o resumo deste filtro
                    resultados_resumo = []
                    
                    # Para cada valor √∫nico do filtro, calcular resultados
                    for valor in valores_unicos:
                        if pd.notna(valor):
                            df_filtrado = df[df[filtro] == valor]
                            indices_filtrados = df.index[df[filtro] == valor].tolist()
                            df_perguntas_filtradas = df_perguntas.loc[indices_filtrados]
                            
                            # Calcular resultados para este filtro
                            resultados_filtro = calcular_resultados_dimensoes(df_filtrado, df_perguntas_filtradas, colunas_perguntas)
                            
                            # Adicionar coluna com o valor do filtro
                            for res in resultados_filtro:
                                res[filtro] = valor
                                resultados_resumo.append(res)
                    
                    if resultados_resumo:
                        df_resumo = pd.DataFrame(resultados_resumo)
                        
                        # Remover a coluna de quest√µes para o Excel
                        if 'Quest√µes' in df_resumo.columns:
                            df_resumo = df_resumo.drop(columns=['Quest√µes'])
                        
                        # Pivotear para melhor visualiza√ß√£o
                        if len(resultados_resumo) > 0:
                            try:
                                df_pivot = df_resumo.pivot(index='Dimens√£o', columns=filtro, values='M√©dia')
                                df_pivot.to_excel(writer, sheet_name=sheet_name)
                                
                                # Formatar a planilha pivotada
                                worksheet = writer.sheets[sheet_name]
                                formatar_aba_excel(workbook, worksheet, df_pivot, is_pivot=True)
                                
                                # Adicionar informa√ß√£o de risco usando formata√ß√£o condicional
                                aplicar_formatacao_condicional(workbook, worksheet, df_pivot)
                            except Exception as e:
                                # Fallback caso pivot falhe
                                df_resumo.to_excel(writer, sheet_name=sheet_name, index=False)
                                worksheet = writer.sheets[sheet_name]
                                formatar_aba_excel(workbook, worksheet, df_resumo)
            
            # Adicionar aba com gr√°fico de resultados gerais
            adicionar_aba_grafico(writer, workbook, df_resultados_empresa)
        
        output.seek(0)
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o arquivo Excel: {str(e)}")
        return None

# Fun√ß√£o para adicionar uma aba com gr√°fico dos resultados
def adicionar_aba_grafico(writer, workbook, df_resultados):
    # Criar uma nova aba para o gr√°fico
    worksheet = workbook.add_worksheet('Gr√°fico de Riscos')
    
    # Adicionar os dados para o gr√°fico
    worksheet.write_column('A1', ['Dimens√£o'] + list(df_resultados['Dimens√£o']))
    worksheet.write_column('B1', ['M√©dia'] + list(df_resultados['M√©dia']))
    worksheet.write_column('C1', ['Risco'] + list(df_resultados['Risco']))
    
    # Criar o gr√°fico
    chart = workbook.add_chart({'type': 'bar'})
    
    # Configurar o gr√°fico
    chart.add_series({
        'name': 'M√©dia',
        'categories': ['Gr√°fico de Riscos', 1, 0, len(df_resultados), 0],
        'values': ['Gr√°fico de Riscos', 1, 1, len(df_resultados), 1],
        'data_labels': {'value': True},
        'fill': {'color': '#4472C4'}
    })
    
    # Configurar apar√™ncia do gr√°fico
    chart.set_title({'name': 'HSE-IT: Fatores Psicossociais - Avalia√ß√£o de Riscos'})
    chart.set_x_axis({'name': 'Dimens√£o'})
    chart.set_y_axis({'name': 'M√©dia (1-5)', 'min': 0, 'max': 5})
    chart.set_legend({'position': 'bottom'})
    chart.set_size({'width': 720, 'height': 576})
    
    # Adicionar linhas de refer√™ncia para os n√≠veis de risco
    chart.set_y_axis({
        'name': 'M√©dia (1-5)',
        'min': 0,
        'max': 5,
        'major_gridlines': {'visible': True},
        'minor_gridlines': {'visible': False},
        'major_unit': 1
    })
    
    # Inserir o gr√°fico na planilha
    worksheet.insert_chart('E1', chart, {'x_scale': 1.5, 'y_scale': 1.5})
    
    # Adicionar legenda de interpreta√ß√£o dos riscos
    worksheet.write('A20', 'Interpreta√ß√£o dos Riscos:', workbook.add_format({'bold': True}))
    worksheet.write('A21', 'M√©dia ‚â§ 1: Risco Muito Alto')
    worksheet.write('A22', '1 < M√©dia ‚â§ 2: Risco Alto')
    worksheet.write('A23', '2 < M√©dia ‚â§ 3: Risco Moderado')
    worksheet.write('A24', '3 < M√©dia ‚â§ 4: Risco Baixo')
    worksheet.write('A25', 'M√©dia > 4: Risco Muito Baixo')

# Fun√ß√£o para gerar PDF do relat√≥rio
def gerar_pdf(df_resultados):
    try:
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        
        # Configurando fonte para suporte b√°sico
        pdf.set_font("Arial", style='B', size=14)
        
        # Usando strings sem acentos para evitar problemas de codifica√ß√£o
        pdf.cell(200, 10, "Relatorio de Fatores Psicossociais - HSE-IT", ln=True, align='C')
        pdf.ln(10)
        
        # Adicionar explica√ß√£o da metodologia
        pdf.set_font("Arial", style='I', size=10)
        pdf.multi_cell(0, 5, "O questionario HSE-IT avalia 7 dimensoes de fatores psicossociais no trabalho. Os resultados sao apresentados em uma escala de 1 a 5, onde valores mais altos indicam melhores resultados.", 0)
        pdf.ln(5)
        
        # Tabela de resultados
        pdf.set_font("Arial", style='B', size=10)
        pdf.cell(80, 7, "Dimensao", 1)
        pdf.cell(25, 7, "Media", 1)
        pdf.cell(60, 7, "Nivel de Risco", 1)
        pdf.ln()
        
        pdf.set_font("Arial", size=10)
        for index, row in df_resultados.iterrows():
            # Remover acentos e caracteres especiais
            dimensao = row['Dimens√£o'].encode('ascii', 'replace').decode('ascii')
            risco = row['Risco'].split(' ')[0] + ' ' + row['Risco'].split(' ')[1]  # Remove emoji
            
            # Determinar cor de fundo baseada no risco
            if "Muito Alto" in risco:
                pdf.set_fill_color(255, 107, 107)  # Vermelho claro
                text_color = 255  # Branco
            elif "Alto" in risco:
                pdf.set_fill_color(255, 165, 0)  # Laranja
                text_color = 0  # Preto
            elif "Moderado" in risco:
                pdf.set_fill_color(255, 255, 0)  # Amarelo
                text_color = 0  # Preto
            elif "Baixo" in risco:
                pdf.set_fill_color(144, 238, 144)  # Verde claro
                text_color = 0  # Preto
            elif "Muito Baixo" in risco:
                pdf.set_fill_color(187, 143, 206)  # Roxo claro
                text_color = 0  # Preto
            else:
                pdf.set_fill_color(255, 255, 255)  # Branco
                text_color = 0  # Preto
                
            pdf.set_text_color(text_color)
            pdf.cell(80, 7, dimensao, 1, 0, 'L', 1)
            pdf.cell(25, 7, f"{row['M√©dia']:.2f}", 1, 0, 'C', 1)
            pdf.cell(60, 7, risco, 1, 0, 'C', 1)
            pdf.ln()
        
        # Resetar cor do texto
        pdf.set_text_color(0)
        
        # Adicionar descri√ß√µes das dimens√µes
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=12)
        pdf.cell(0, 10, "Descricao das Dimensoes:", ln=True)
        
        for dimensao, descricao in DESCRICOES_DIMENSOES.items():
            pdf.set_font("Arial", style='B', size=10)
            pdf.cell(0, 7, dimensao.encode('ascii', 'replace').decode('ascii'), ln=True)
            pdf.set_font("Arial", size=10)
            pdf.multi_cell(0, 5, descricao.encode('ascii', 'replace').decode('ascii'), 0)
            pdf.ln(3)
        
        # Adicionar informa√ß√µes sobre classifica√ß√£o de risco
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=12)
        pdf.cell(0, 10, "Legenda de Classificacao:", ln=True)
        pdf.set_font("Arial", size=10)
        pdf.cell(0, 8, "Risco Muito Alto: Media <= 1", ln=True)
        pdf.cell(0, 8, "Risco Alto: 1 < Media <= 2", ln=True)
        pdf.cell(0, 8, "Risco Moderado: 2 < Media <= 3", ln=True)
        pdf.cell(0, 8, "Risco Baixo: 3 < Media <= 4", ln=True)
        pdf.cell(0, 8, "Risco Muito Baixo: Media > 4", ln=True)
        
        # Adicionar recomenda√ß√µes gerais
        pdf.ln(10)
        pdf.set_font("Arial", style='B', size=12)
        pdf.cell(0, 10, "Recomendacoes Gerais:", ln=True)
        pdf.set_font("Arial", size=10)
        pdf.multi_cell(0, 5, "Para resultados mais detalhados e um plano de acao personalizado, consulte o arquivo Excel completo ou o documento do Plano de Acao fornecido. Priorize intervencoes nas dimensoes com maior nivel de risco.", 0)
        
        # Corrigindo o problema de BytesIO
        temp_file = "temp_report.pdf"
        pdf.output(temp_file)
        
        with open(temp_file, "rb") as file:
            output = io.BytesIO(file.read())
        
        import os
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o PDF: {str(e)}")
        return None

# Fun√ß√£o para criar dashboard melhorado com visualiza√ß√µes mais ricas
def criar_dashboard(df_resultados, filtro_opcao, filtro_valor):
    st.markdown("## Dashboard de Riscos Psicossociais HSE-IT")
    
    # Explica√ß√£o sobre a metodologia HSE-IT
    with st.expander("Sobre a Metodologia HSE-IT"):
        st.write("""
        O HSE-IT (Health and Safety Executive - Indicator Tool) √© um question√°rio desenvolvido pelo √≥rg√£o brit√¢nico 
        de sa√∫de e seguran√ßa ocupacional para avaliar os riscos psicossociais no ambiente de trabalho.
        
        O question√°rio avalia 7 dimens√µes:
        
        1. **Demanda**: Aspectos como carga de trabalho, padr√µes e ambiente de trabalho
        2. **Controle**: Quanto controle a pessoa tem sobre como realiza seu trabalho
        3. **Apoio da Chefia**: Incentivo, suporte e recursos fornecidos pela lideran√ßa
        4. **Apoio dos Colegas**: Incentivo e suporte fornecidos pelos colegas
        5. **Relacionamentos**: Promo√ß√£o de trabalho positivo para evitar conflitos
        6. **Fun√ß√£o**: Compreens√£o do papel na organiza√ß√£o e aus√™ncia de conflitos de papel
        7. **Mudan√ßa**: Como mudan√ßas organizacionais s√£o gerenciadas e comunicadas
        
        A pontua√ß√£o varia de 1 a 5, onde valores mais altos indicam melhores resultados.
        """)
    
    # Layout com 3 m√©tricas principais
    col1, col2, col3 = st.columns(3)
    
    # Calcular m√©tricas
    media_geral = df_resultados["M√©dia"].mean()
    risco_geral, cor_geral = classificar_risco(media_geral)
    dimensao_mais_critica = df_resultados.loc[df_resultados["M√©dia"].idxmin()]
    dimensao_melhor = df_resultados.loc[df_resultados["M√©dia"].idxmax()]
    
    # Exibir m√©tricas com formata√ß√£o visual melhorada
    with col1:
        st.metric(
            label="M√©dia Geral",
            value=f"{media_geral:.2f}",
            delta=risco_geral.split()[0],
            delta_color="inverse"
        )
        st.markdown(f"<div style='text-align: center; color: {cor_geral};'><b>{risco_geral}</b></div>", unsafe_allow_html=True)
    
    with col2:
        st.metric(
            label="Dimens√£o Mais Cr√≠tica",
            value=dimensao_mais_critica["Dimens√£o"],
            delta=f"{dimensao_mais_critica['M√©dia']:.2f}",
            delta_color="off"
        )
        risco, cor = classificar_risco(dimensao_mais_critica["M√©dia"])
        st.markdown(f"<div style='text-align: center; color: {cor};'><b>{risco}</b></div>", unsafe_allow_html=True)
    
    with col3:
        st.metric(
            label="Dimens√£o Melhor Avaliada",
            value=dimensao_melhor["Dimens√£o"],
            delta=f"{dimensao_melhor['M√©dia']:.2f}",
            delta_color="off"
        )
        risco, cor = classificar_risco(dimensao_melhor["M√©dia"])
        st.markdown(f"<div style='text-align: center; color: {cor};'><b>{risco}</b></div>", unsafe_allow_html=True)
    
    # Criar gr√°fico de barras para visualiza√ß√£o dos riscos
    fig = criar_grafico_barras(df_resultados)
    st.plotly_chart(fig, use_container_width=True)
    
    # Mostrar informa√ß√µes detalhadas sobre cada dimens√£o
    st.subheader("Detalhes por Dimens√£o")
    
    for idx, row in df_resultados.iterrows():
        dimensao = row["Dimens√£o"]
        media = row["M√©dia"]
        risco = row["Risco"]
        _, cor = classificar_risco(media)
        descricao = row["Descri√ß√£o"]
        
        with st.expander(f"{dimensao} - {risco}"):
            st.markdown(f"**M√©dia**: {media:.2f}")
            st.markdown(f"**N√≠vel de Risco**: <span style='color:{cor};'>{risco}</span>", unsafe_allow_html=True)
            st.markdown(f"**Descri√ß√£o**: {descricao}")
            st.markdown(f"**Quest√µes HSE-IT relacionadas**: {row['Quest√µes']}")
            
            # Adicionar sugest√µes de melhoria
            if "Muito Alto" in risco or "Alto" in risco:
                st.markdown("**Sugest√µes de Melhoria Priorit√°rias:**")
                plano_temp = gerar_sugestoes_acoes(pd.DataFrame([row]))
                for _, sugestao in plano_temp.iterrows():
                    st.markdown(f"- {sugestao['Sugest√£o de A√ß√£o']}")
    
    return

# Fun√ß√£o para criar gr√°fico de barras melhorado usando Plotly
def criar_grafico_barras(df_resultados):
    # Ordenar resultados do menor para o maior (pior para melhor)
    df_sorted = df_resultados.sort_values(by="M√©dia")
    
    # Preparar dados para o gr√°fico
    cores = []
    hover_texts = []
    
    for media in df_sorted["M√©dia"]:
        _, cor = classificar_risco(media)
        cores.append(cor)
    
    for _, row in df_sorted.iterrows():
        hover_texts.append(f"Dimens√£o: {row['Dimens√£o']}<br>" +
                          f"M√©dia: {row['M√©dia']:.2f}<br>" +
                          f"Classifica√ß√£o: {row['Risco']}<br>" +
                          f"Descri√ß√£o: {row['Descri√ß√£o']}")
    
    # Criar gr√°fico
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=df_sorted["M√©dia"],
        y=df_sorted["Dimens√£o"],
        orientation='h',
        marker_color=cores,
        text=[f"{v:.2f}" for v in df_sorted["M√©dia"]],
        textposition='outside',
        hovertext=hover_texts,
        hoverinfo='text'
    ))
    
    # Adicionar linhas verticais para n√≠veis de risco
    fig.add_shape(
        type="line",
        x0=1, y0=-0.5, x1=1, y1=len(df_resultados)-0.5,
        line=dict(color="Red", width=2, dash="dash")
    )
    
    fig.add_shape(
        type="line",
        x0=2, y0=-0.5, x1=2, y1=len(df_resultados)-0.5,
        line=dict(color="Orange", width=2, dash="dash")
    )
    
    fig.add_shape(
        type="line",
        x0=3, y0=-0.5, x1=3, y1=len(df_resultados)-0.5,
        line=dict(color="Yellow", width=2, dash="dash")
    )
    
    fig.add_shape(
        type="line",
        x0=4, y0=-0.5, x1=4, y1=len(df_resultados)-0.5,
        line=dict(color="Green", width=2, dash="dash")
    )
    
    # Adicionar anota√ß√µes para n√≠veis de risco
    fig.add_annotation(x=0.5, y=len(df_resultados), text="Risco Muito Alto", 
                      showarrow=False, font=dict(color="red"))
    fig.add_annotation(x=1.5, y=len(df_resultados), text="Risco Alto", 
                      showarrow=False, font=dict(color="orange"))
    fig.add_annotation(x=2.5, y=len(df_resultados), text="Risco Moderado", 
                      showarrow=False, font=dict(color="black"))
    fig.add_annotation(x=3.5, y=len(df_resultados), text="Risco Baixo", 
                      showarrow=False, font=dict(color="green"))
    fig.add_annotation(x=4.5, y=len(df_resultados), text="Risco Muito Baixo", 
                      showarrow=False, font=dict(color="purple"))
    
    # Configurar layout
    fig.update_layout(
        title=f"Classifica√ß√£o de Riscos Psicossociais HSE-IT",
        xaxis_title="M√©dia (Escala 1-5)",
        yaxis_title="Dimens√£o",
        xaxis=dict(range=[0, 5]),
        height=500,
        margin=dict(l=20, r=20, t=50, b=80)
    )
    
    return fig

# Fun√ß√£o para o plano de a√ß√£o edit√°vel
def plano_acao_editavel(df_plano_acao):
    st.header("Plano de A√ß√£o Personalizado")
    st.write("Personalize o plano de a√ß√£o sugerido ou adicione suas pr√≥prias a√ß√µes para cada dimens√£o HSE-IT.")
    
    # Inicializar plano de a√ß√£o no state se n√£o existir
    if "plano_acao_personalizado" not in st.session_state:
        st.session_state.plano_acao_personalizado = df_plano_acao.copy()
    
    # Criar tabs para cada dimens√£o
    dimensoes_unicas = df_plano_acao["Dimens√£o"].unique()
    dimensao_tabs = st.tabs(dimensoes_unicas)
    
    # Para cada dimens√£o, criar um editor de a√ß√µes
    for i, dimensao in enumerate(dimensoes_unicas):
        with dimensao_tabs[i]:
            df_dimensao = st.session_state.plano_acao_personalizado[
                st.session_state.plano_acao_personalizado["Dimens√£o"] == dimensao
            ].copy()
            
            # Mostrar informa√ß√µes da dimens√£o
            nivel_risco = df_dimensao["N√≠vel de Risco"].iloc[0]
            media = df_dimensao["M√©dia"].iloc[0]
            
            # Definir cor com base no n√≠vel de risco
            cor = {
                "Risco Muito Alto": "red",
                "Risco Alto": "orange",
                "Risco Moderado": "yellow",
                "Risco Baixo": "green",
                "Risco Muito Baixo": "purple"
            }.get(nivel_risco, "gray")
            
            # Exibir descri√ß√£o da dimens√£o
            st.markdown(f"**Descri√ß√£o da Dimens√£o:** {DESCRICOES_DIMENSOES[dimensao]}")
            st.markdown(f"**M√©dia:** {media} - **N√≠vel de Risco:** :{cor}[{nivel_risco}]")
            
            # Adicionar nova a√ß√£o
            st.subheader("Adicionar Nova A√ß√£o:")
            col1, col2 = st.columns([3, 1])
            
            with col1:
                nova_acao = st.text_area("Descri√ß√£o da a√ß√£o", key=f"nova_acao_{dimensao}")
            
            with col2:
                st.write("&nbsp;")  # Espa√ßamento
                adicionar = st.button("Adicionar", key=f"add_{dimensao}")
                
                if adicionar and nova_acao.strip():
                    # Criar nova linha para o DataFrame
                    nova_linha = {
                        "Dimens√£o": dimensao,
                        "N√≠vel de Risco": nivel_risco,
                        "M√©dia": media,
                        "Sugest√£o de A√ß√£o": nova_acao,
                        "Respons√°vel": "",
                        "Prazo": "",
                        "Status": "N√£o iniciada",
                        "Personalizada": True  # Marcar como a√ß√£o personalizada
                    }
                    
                    # Adicionar ao DataFrame
                    st.session_state.plano_acao_personalizado = pd.concat([
                        st.session_state.plano_acao_personalizado, 
                        pd.DataFrame([nova_linha])
                    ], ignore_index=True)
                    
                    # Limpar campo de texto
                    st.session_state[f"nova_acao_{dimensao}"] = ""
                    st.experimental_rerun()
            
            # Mostrar a√ß√µes existentes para editar
            st.subheader("A√ß√µes Sugeridas:")
            for j, (index, row) in enumerate(df_dimensao.iterrows()):
                with st.expander(f"A√ß√£o {j+1}: {row['Sugest√£o de A√ß√£o'][:50]}...", expanded=False):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        # Editor de texto para a a√ß√£o
                        acao_editada = st.text_area(
                            "Descri√ß√£o da a√ß√£o", 
                            row["Sugest√£o de A√ß√£o"], 
                            key=f"acao_{dimensao}_{j}"
                        )
                        if acao_editada != row["Sugest√£o de A√ß√£o"]:
                            st.session_state.plano_acao_personalizado.at[index, "Sugest√£o de A√ß√£o"] = acao_editada
                    
                    with col2:
                        # Campos para respons√°vel, prazo e status
                        responsavel = st.text_input(
                            "Respons√°vel", 
                            row.get("Respons√°vel", ""), 
                            key=f"resp_{dimensao}_{j}"
                        )
                        if responsavel != row.get("Respons√°vel", ""):
                            st.session_state.plano_acao_personalizado.at[index, "Respons√°vel"] = responsavel
                        
                        # Campo de data para prazo
                        try:
                            data_padrao = None
                            if row.get("Prazo") and row.get("Prazo") != "":
                                try:
                                    data_padrao = datetime.strptime(row.get("Prazo"), "%d/%m/%Y")
                                except:
                                    data_padrao = None
                            
                            prazo = st.date_input(
                                "Prazo", 
                                value=data_padrao,
                                key=f"prazo_{dimensao}_{j}"
                            )
                            if prazo:
                                st.session_state.plano_acao_personalizado.at[index, "Prazo"] = prazo.strftime("%d/%m/%Y")
                        except Exception as e:
                            st.warning(f"Erro ao processar data: {e}")
                        
                        # Seletor de status
                        status = st.selectbox(
                            "Status",
                            options=["N√£o iniciada", "Em andamento", "Conclu√≠da", "Cancelada"],
                            index=["N√£o iniciada", "Em andamento", "Conclu√≠da", "Cancelada"].index(row.get("Status", "N√£o iniciada")),
                            key=f"status_{dimensao}_{j}"
                        )
                        if status != row.get("Status", "N√£o iniciada"):
                            st.session_state.plano_acao_personalizado.at[index, "Status"] = status
                        
                        # Bot√£o para remover (apenas para a√ß√µes personalizadas)
                        if row.get("Personalizada", False):
                            if st.button("üóëÔ∏è Remover", key=f"del_{dimensao}_{j}"):
                                st.session_state.plano_acao_personalizado = st.session_state.plano_acao_personalizado.drop(index)
                                st.experimental_rerun()
    
    # Bot√£o para exportar plano personalizado
    if st.button("Exportar Plano de A√ß√£o Personalizado"):
        # Gerar Excel com o plano personalizado
        output = gerar_excel_plano_personalizado(st.session_state.plano_acao_personalizado)
        if output:
            st.success("Plano de A√ß√£o gerado com sucesso!")
            st.download_button(
                label="Baixar Plano de A√ß√£o Personalizado",
                data=output,
                file_name="plano_acao_personalizado.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

# Fun√ß√£o para gerar excel do plano personalizado
def gerar_excel_plano_personalizado(df_plano_personalizado):
    output = io.BytesIO()
    
    try:
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            workbook = writer.book
            
            # Aba principal com o plano de a√ß√£o
            df_plano_copia = df_plano_personalizado.copy()
            
            # Remover coluna Personalizada antes de exportar
            if "Personalizada" in df_plano_copia.columns:
                df_plano_copia = df_plano_copia.drop(columns=["Personalizada"])
                
            df_plano_copia.to_excel(writer, sheet_name='Plano de A√ß√£o', index=False)
            
            # Formatar a aba
            worksheet = writer.sheets['Plano de A√ß√£o']
            
            # Definir formatos
            header_format = workbook.add_format({
                'bold': True,
                'text_wrap': True,
                'valign': 'top',
                'fg_color': '#D7E4BC',
                'border': 1
            })

            risco_format = {
                'Risco Muito Alto': workbook.add_format({'bg_color': '#FF6B6B', 'font_color': 'white'}),
                'Risco Alto': workbook.add_format({'bg_color': '#FFA500'}),
                'Risco Moderado': workbook.add_format({'bg_color': '#FFFF00'}),
                'Risco Baixo': workbook.add_format({'bg_color': '#90EE90'}),
                'Risco Muito Baixo': workbook.add_format({'bg_color': '#BB8FCE'})
            }
            
            # Configurar largura das colunas
            worksheet.set_column('A:A', 25)  # Dimens√£o
            worksheet.set_column('B:B', 15)  # N√≠vel de Risco
            worksheet.set_column('C:C', 10)  # M√©dia
            worksheet.set_column('D:D', 50)  # Sugest√£o de A√ß√£o
            worksheet.set_column('E:E', 15)  # Respons√°vel
            worksheet.set_column('F:F', 15)  # Prazo
            worksheet.set_column('G:G', 15)  # Status
            
            # Adicionar cabe√ßalhos formatados
            for col_num, value in enumerate(df_plano_copia.columns.values):
                worksheet.write(0, col_num, value, header_format)
            
            # Aplicar formata√ß√£o condicional baseada no n√≠vel de risco
            for row_num, (_, row) in enumerate(df_plano_copia.iterrows(), 1):
                nivel_risco = row["N√≠vel de Risco"]
                if nivel_risco in risco_format:
                    worksheet.write(row_num, 1, nivel_risco, risco_format[nivel_risco])
            
            # Adicionar valida√ß√£o de dados para a coluna Status
            status_options = ['N√£o iniciada', 'Em andamento', 'Conclu√≠da', 'Cancelada']
            worksheet.data_validation('G2:G1000', {'validate': 'list',
                                                'source': status_options,
                                                'input_title': 'Selecione o status:',
                                                'input_message': 'Escolha um status da lista'})
            
            # Adicionar filtros
            worksheet.autofilter(0, 0, len(df_plano_copia), len(df_plano_copia.columns) - 1)
            
            # Congelar painel para manter cabe√ßalhos vis√≠veis durante rolagem
            worksheet.freeze_panes(1, 0)
            
            # Adicionar aba com explica√ß√£o das dimens√µes HSE-IT
            worksheet_dimensoes = workbook.add_worksheet('Informa√ß√µes HSE-IT')
            
            # T√≠tulo
            title_format = workbook.add_format({'bold': True, 'size': 14})
            worksheet_dimensoes.write('A1', 'Question√°rio HSE-IT: Dimens√µes e Significados', title_format)
            worksheet_dimensoes.set_column('A:A', 20)
            worksheet_dimensoes.set_column('B:B', 60)
            
            # Cabe√ßalhos
            header_format = workbook.add_format({'bold': True, 'fg_color': '#D7E4BC', 'border': 1})
            worksheet_dimensoes.write('A3', 'Dimens√£o', header_format)
            worksheet_dimensoes.write('B3', 'Descri√ß√£o', header_format)
            
            # Conte√∫do
            row = 4
            for dimensao, descricao in DESCRICOES_DIMENSOES.items():
                worksheet_dimensoes.write(row, 0, dimensao)
                worksheet_dimensoes.write(row, 1, descricao)
                row += 1
                
            # Adicionar informa√ß√µes sobre a interpreta√ß√£o dos riscos
            row += 2
            worksheet_dimensoes.write(row, 0, 'Interpreta√ß√£o dos Riscos:', workbook.add_format({'bold': True}))
            row += 1
            worksheet_dimensoes.write(row, 0, 'Risco Muito Alto:')
            worksheet_dimensoes.write(row, 1, 'M√©dia ‚â§ 1 (Prioridade m√°xima para interven√ß√£o)')
            row += 1
            worksheet_dimensoes.write(row, 0, 'Risco Alto:')
            worksheet_dimensoes.write(row, 1, '1 < M√©dia ‚â§ 2 (Alta prioridade para interven√ß√£o)')
            row += 1
            worksheet_dimensoes.write(row, 0, 'Risco Moderado:')
            worksheet_dimensoes.write(row, 1, '2 < M√©dia ‚â§ 3 (Prioridade m√©dia para interven√ß√£o)')
            row += 1
            worksheet_dimensoes.write(row, 0, 'Risco Baixo:')
            worksheet_dimensoes.write(row, 1, '3 < M√©dia ‚â§ 4 (Baixa prioridade, mas ainda h√° espa√ßo para melhorias)')
            row += 1
            worksheet_dimensoes.write(row, 0, 'Risco Muito Baixo:')
            worksheet_dimensoes.write(row, 1, 'M√©dia > 4 (Manter as boas pr√°ticas atuais)')
        
        output.seek(0)
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o arquivo Excel: {str(e)}")
        return None

# Fun√ß√£o para gerar template para coleta de dados HSE-IT
def gerar_template_excel():
    output = io.BytesIO()
    
    try:
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            workbook = writer.book
            
            # Criar DataFrame com a estrutura esperada
            colunas = [
                "Setor", "Cargo", "Tempo_Empresa", "Genero", "Faixa_Etaria", "Escolaridade", "Regime_Trabalho",
            ]
            
            # As quest√µes HSE-IT
            questoes_hse = [
                "1. Sei claramente o que √© esperado de mim no trabalho",
                "2. Posso decidir quando fazer uma pausa",
                "3. Grupos de trabalho diferentes pedem-me coisas dif√≠ceis de conjugar",
                "4. Sei do que necessito para fazer o meu trabalho",
                "5. Sou sujeito a ass√©dio pessoal sob a forma de palavras ou comportamentos incorretos",
                "6. Tenho prazos imposs√≠veis de cumprir",
                "7. Se o trabalho se torna dif√≠cil, os colegas ajudam-me",
                "8. Recebo feedback de apoio sobre o trabalho que fa√ßo",
                "9. Tenho que trabalhar muito intensivamente",
                "10. Tenho capacidade de decis√£o sobre a minha rapidez de trabalho",
                "11. Sei claramente os meus deveres e responsabilidades",
                "12. Tenho que negligenciar tarefas porque tenho uma carga elevada para cumprir",
                "13. Sei claramente as metas e objetivos do meu departamento",
                "14. H√° fric√ß√£o ou animosidade entre os colegas",
                "15. Posso decidir como fazer o meu trabalho",
                "16. N√£o consigo fazer pausas suficientes",
                "17. Compreendo como o meu trabalho se integra no objetivo geral da organiza√ß√£o",
                "18. Sou pressionado a trabalhar durante hor√°rios longos",
                "19. Tenho poder de escolha para decidir o que fa√ßo no trabalho",
                "20. Tenho que trabalhar muito depressa",
                "21. Sou sujeito a intimida√ß√£o/persegui√ß√£o no trabalho",
                "22. Tenho press√µes de tempo irrealistas",
                "23. Posso estar seguro de que o meu chefe imediato me ajuda num problema de trabalho",
                "24. Tenho ajuda e apoio necess√°rios dos colegas",
                "25. Tenho algum poder de decis√£o sobre a minha forma de trabalho",
                "26. Tenho oportunidades suficientes para questionar os chefes sobre mudan√ßas no trabalho",
                "27. Sou respeitado como mere√ßo pelos colegas de trabalho",
                "28. O pessoal √© sempre consultado sobre mudan√ßa no trabalho",
                "29. Posso falar com o meu chefe imediato sobre algo no trabalho que me transtornou ou irritou",
                "30. O meu hor√°rio pode ser flex√≠vel",
                "31. Os meus colegas est√£o dispostos a ouvir os meus problemas relacionados com o trabalho",
                "32. Quando s√£o efetuadas mudan√ßas no trabalho, sei claramente como resultar√£o na pr√°tica",
                "33. Recebo apoio durante trabalho que pode ser emocionalmente exigente",
                "34. Os relacionamentos no trabalho est√£o sob press√£o",
                "35. O meu chefe imediato encoraja-me no trabalho"
            ]
            
            # Adicionar quest√µes ao template
            for q in questoes_hse:
                colunas.append(q)
            
            df_template = pd.DataFrame(columns=colunas)
            
            # Adicionar linha de exemplo
            valores_exemplo = ["TI", "Analista", "1-3 anos", "Masculino", "25-35", "Superior", "CLT"]
            # Valores para as quest√µes (gerando valores aleat√≥rios entre 1 e 5 para exemplo)
            import random
            random.seed(42)  # Para consist√™ncia
            valores_exemplo.extend([random.randint(1, 5) for _ in range(len(questoes_hse))])
            
            df_template.loc[0] = valores_exemplo
            
            # Exportar para Excel
            df_template.to_excel(writer, sheet_name="Question√°rio HSE-IT", index=False)
            
            # Formatar a planilha
            worksheet = writer.sheets["Question√°rio HSE-IT"]
            
            # Configurar largura das colunas
            for i, col in enumerate(df_template.columns):
                # Calcular largura baseada no comprimento da coluna
                col_width = max(len(str(col)), 15)
                worksheet.set_column(i, i, col_width)
            
            # Criar folha de instru√ß√µes
            worksheet_instrucoes = workbook.add_worksheet("Instru√ß√µes")
            
            # Formatar cabe√ßalho das instru√ß√µes
            header_format = workbook.add_format({'bold': True, 'size': 14})
            worksheet_instrucoes.write('A1', 'Instru√ß√µes para Aplica√ß√£o do Question√°rio HSE-IT', header_format)
            worksheet_instrucoes.set_column('A:A', 100)
            
            # Adicionar instru√ß√µes
            instrucoes = [
                "",
                "Sobre o HSE-IT:",
                "O HSE-IT (Health and Safety Executive - Indicator Tool) √© um question√°rio validado para avalia√ß√£o de fatores psicossociais no trabalho, desenvolvido pela institui√ß√£o brit√¢nica de sa√∫de e seguran√ßa.",
                "",
                "Instru√ß√µes de uso:",
                "",
                "1. As primeiras 7 colunas cont√™m informa√ß√µes demogr√°ficas que podem ser adaptadas conforme necess√°rio:",
                "   - Setor: √Årea/departamento do colaborador",
                "   - Cargo: Fun√ß√£o desempenhada",
                "   - Tempo_Empresa: Tempo de perman√™ncia na organiza√ß√£o",
                "   - G√™nero: Identifica√ß√£o de g√™nero",
                "   - Faixa_Et√°ria: Grupo et√°rio",
                "   - Escolaridade: N√≠vel de forma√ß√£o",
                "   - Regime_Trabalho: Tipo de contrato/regime",
                "",
                "2. As demais colunas (35) cont√™m as perguntas do question√°rio HSE-IT. N√£o altere o conte√∫do destas perguntas para preservar a validade do instrumento.",
                "",
                "3. As respostas devem ser preenchidas com valores de 1 a 5, seguindo esta escala:",
                "   - 1: Nunca / Discordo totalmente",
                "   - 2: Raramente / Discordo parcialmente",
                "   - 3: √Äs vezes / Nem concordo nem discordo",
                "   - 4: Frequentemente / Concordo parcialmente",
                "   - 5: Sempre / Concordo totalmente",
                "",
                "4. IMPORTANTE: Para algumas quest√µes espec√≠ficas, a escala √© invertida devido √† formula√ß√£o negativa. Estas quest√µes s√£o: 3, 5, 6, 9, 12, 14, 16, 18, 20, 21, 22 e 34.",
                "   Exemplo: Para a quest√£o 'Tenho prazos imposs√≠veis de cumprir', responder '1' (Nunca) √© positivo.",
                "",
                "5. Mantenha a estrutura exata deste template, incluindo numera√ß√£o e texto completo das quest√µes.",
                "",
                "6. Aplique o question√°rio garantindo o anonimato das respostas para obter dados mais honestos e confi√°veis.",
                "",
                "7. Recomenda-se aplicar o question√°rio a pelo menos 60% dos colaboradores para obter um panorama representativo da organiza√ß√£o.",
                "",
                "8. Os resultados s√£o agrupados em 7 dimens√µes: Demanda, Controle, Apoio da Chefia, Apoio dos Colegas, Relacionamentos, Fun√ß√£o e Mudan√ßa.",
                "",
                "Ap√≥s a coleta, utilize a plataforma HSE-IT Analytics para processar os dados e gerar relat√≥rios de riscos psicossociais."
            ]
            
            # Escrever instru√ß√µes
            for i, texto in enumerate(instrucoes, 2):
                worksheet_instrucoes.write(i, 0, texto)
                
            # Adicionar aba com detalhes sobre as dimens√µes
            worksheet_dimensoes = workbook.add_worksheet("Dimens√µes HSE-IT")
            
            # T√≠tulo
            worksheet_dimensoes.write('A1', 'Dimens√µes do Question√°rio HSE-IT', header_format)
            worksheet_dimensoes.set_column('A:A', 15)
            worksheet_dimensoes.set_column('B:B', 40)
            worksheet_dimensoes.set_column('C:C', 30)
            
            # Cabe√ßalhos
            dim_header = workbook.add_format({'bold': True, 'fg_color': '#D7E4BC', 'border': 1})
            worksheet_dimensoes.write('A3', 'Dimens√£o', dim_header)
            worksheet_dimensoes.write('B3', 'Descri√ß√£o', dim_header)
            worksheet_dimensoes.write('C3', 'Quest√µes', dim_header)
            
            # Conte√∫do
            row = 4
            for dimensao, questoes in DIMENSOES_HSE.items():
                worksheet_dimensoes.write(row, 0, dimensao)
                worksheet_dimensoes.write(row, 1, DESCRICOES_DIMENSOES[dimensao])
                worksheet_dimensoes.write(row, 2, str(questoes))
                row += 1
            
            # Adicionar informa√ß√µes sobre quest√µes invertidas
            row += 2
            worksheet_dimensoes.write(row, 0, 'IMPORTANTE:', workbook.add_format({'bold': True}))
            row += 1
            worksheet_dimensoes.write(row, 0, 'Quest√µes com escala invertida:')
            worksheet_dimensoes.write(row, 1, str(QUESTOES_INVERTIDAS))
            row += 1
            worksheet_dimensoes.write(row, 0, 'Nestas quest√µes, uma pontua√ß√£o mais baixa √© positiva devido √† formula√ß√£o negativa da pergunta.')
        
        output.seek(0)
        return output
    
    except Exception as e:
        st.error(f"Erro ao gerar o template Excel: {str(e)}")
        return None

# Aplicativo principal
def main():
    # Verificar autentica√ß√£o antes de mostrar o conte√∫do
    if check_password():
        # Criar sistema de abas para melhor organiza√ß√£o
        tabs = st.tabs(["Upload de Dados", "Resultados", "Plano de A√ß√£o", "Relat√≥rios", "Informa√ß√µes HSE-IT"])

        # Primeira aba - Upload e configura√ß√£o
        with tabs[0]:
            st.title("Avalia√ß√£o de Fatores Psicossociais - HSE-IT")
            st.write("Fa√ßa upload do arquivo Excel contendo os resultados do question√°rio HSE-IT.")
            
            # Adiciona uma explica√ß√£o sobre o formato esperado do arquivo
            with st.expander("Informa√ß√µes sobre o formato do arquivo"):
                st.write("""
                O arquivo deve conter:
                - Colunas de filtro (Setor, Cargo, etc.) nas primeiras 7 colunas
                - Colunas com as perguntas numeradas do HSE-IT (come√ßando com n√∫meros seguidos de ponto)
                - As respostas devem ser valores num√©ricos de 1 a 5
                
                Voc√™ pode baixar um template na aba "Informa√ß√µes HSE-IT".
                """)
            
            uploaded_file = st.file_uploader("Escolha um arquivo Excel ou CSV", type=["xlsx", "csv"])
            
            # Barra lateral para filtros e configura√ß√µes
            with st.sidebar:
                st.header("Filtros e Configura√ß√µes")
                
                # Inicializar vari√°veis para evitar erros
                df_resultados = None
                df_plano_acao = None
                filtro_opcao = "Empresa Toda"
                filtro_valor = "Geral"
                
                if uploaded_file is not None:
                    try:
                        # Carregar dados
                        df, df_perguntas, colunas_filtro, colunas_perguntas = carregar_dados(uploaded_file)
                        
                        # Criar op√ß√µes de filtro
                        opcoes_filtro = ["Empresa Toda"] + [col for col in colunas_filtro if col != "Carimbo de data/hora"]
                        
                        filtro_opcao = st.selectbox("Filtrar por", opcoes_filtro)
                        
                        filtro_valor = "Geral"
                        df_filtrado = df
                        
                        if filtro_opcao != "Empresa Toda":
                            valores_unicos = df[filtro_opcao].dropna().unique()
                            if len(valores_unicos) > 0:
                                filtro_valor = st.selectbox(f"Escolha um {filtro_opcao}", valores_unicos)
                                df_filtrado = df[df[filtro_opcao] == filtro_valor]
                                
                                # Filtrar as perguntas de acordo com o filtro
                                indices_filtrados = df.index[df[filtro_opcao] == filtro_valor].tolist()
                                df_perguntas_filtradas = df_perguntas.loc[indices_filtrados]
                            else:
                                st.warning(f"N√£o h√° valores √∫nicos para o filtro '{filtro_opcao}'.")
                        else:
                            df_perguntas_filtradas = df_perguntas
                        
                        # Calcular resultados
                        resultados = calcular_resultados_dimensoes(df_filtrado, df_perguntas_filtradas, colunas_perguntas)
                        df_resultados = pd.DataFrame(resultados)
                        
                        # Armazenar no session_state para acesso em outras abas
                        st.session_state.df_resultados = df_resultados
                        st.session_state.df = df
                        st.session_state.df_perguntas = df_perguntas
                        st.session_state.colunas_filtro = colunas_filtro
                        st.session_state.colunas_perguntas = colunas_perguntas
                        st.session_state.filtro_opcao = filtro_opcao
                        st.session_state.filtro_valor = filtro_valor
                        
                        # Gerar plano de a√ß√£o
                        df_plano_acao = gerar_sugestoes_acoes(df_resultados)
                        st.session_state.df_plano_acao = df_plano_acao
                        
                        st.success(f"Dados carregados com sucesso! Foram encontrados {len(df)} registros e {len(colunas_perguntas)} perguntas.")
                        
                    except Exception as e:
                        st.error(f"Ocorreu um erro inesperado: {str(e)}")
                        st.write("Detalhes do erro para debug:")
                        st.exception(e)
                
                # Informa√ß√µes sobre a metodologia HSE-IT
                with st.expander("Sobre a Metodologia HSE-IT"):
                    st.write("""
                    O HSE-IT √© um question√°rio de 35 perguntas dividido em 7 dimens√µes:
                    
                    1. **Demanda**: Carga de trabalho, ritmo e ambiente
                    2. **Controle**: Autonomia no trabalho
                    3. **Apoio da Chefia**: Suporte dos superiores
                    4. **Apoio dos Colegas**: Suporte dos pares
                    5. **Relacionamentos**: Promo√ß√£o de trabalho positivo
                    6. **Fun√ß√£o**: Clareza de pap√©is e responsabilidades
                    7. **Mudan√ßa**: Gest√£o de transforma√ß√µes organizacionais
                    """)
            
            if uploaded_file is not None and "df_resultados" in st.session_state and st.session_state.df_resultados is not None:
                st.success("Dados processados com sucesso. Navegue para a aba 'Resultados' para visualizar a an√°lise.")
                
                # Mostrar resumo dos dados
                st.subheader("Resumo dos Dados Carregados")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("Total de Registros", len(st.session_state.df))
                with col2:
                    st.metric("Dimens√µes Avaliadas", "7")
                with col3:
                    st.metric("Quest√µes do HSE-IT", "35")
                
                # Preview dos dados
                with st.expander("Visualizar primeiras linhas dos dados"):
                    st.dataframe(st.session_state.df.head())
        
        # Segunda aba - Visualiza√ß√£o de resultados
        with tabs[1]:
            if "df_resultados" in st.session_state and st.session_state.df_resultados is not None:
                df_resultados = st.session_state.df_resultados
                filtro_opcao = st.session_state.filtro_opcao
                filtro_valor = st.session_state.filtro_valor
                
                # Mostrar dashboard melhorado
                criar_dashboard(df_resultados, filtro_opcao, filtro_valor)
                
                st.write("### Resultados Detalhados da Avalia√ß√£o")
                
                # Remover a coluna de quest√µes para visualiza√ß√£o mais limpa
                df_visualizacao = df_resultados.copy()
                if 'Quest√µes' in df_visualizacao.columns:
                    df_visualizacao = df_visualizacao.drop(columns=['Quest√µes'])
                    
                st.dataframe(df_visualizacao)
                
                # Adicionar um bot√£o para exportar os resultados detalhados
                csv = df_visualizacao.to_csv(index=False)
                st.download_button(
                    label="Baixar Resultados CSV",
                    data=csv,
                    file_name=f"resultados_hse_it_{filtro_opcao}_{filtro_valor}.csv",
                    mime="text/csv",
                )
            else:
                st.info("Primeiro fa√ßa o upload dos dados na aba 'Upload de Dados'.")
        
        # Terceira aba - Plano de a√ß√£o
        with tabs[2]:
            if "df_plano_acao" in st.session_state and st.session_state.df_plano_acao is not None:
                # Mostrar o plano de a√ß√£o edit√°vel
                plano_acao_editavel(st.session_state.df_plano_acao)
            else:
                st.info("Primeiro fa√ßa o upload dos dados na aba 'Upload de Dados'.")
        
        # Quarta aba - Relat√≥rios
        with tabs[3]:
            if "df_resultados" in st.session_state and st.session_state.df_resultados is not None:
                st.header("Download de Relat√≥rios")
                
                # Recuperar dados do session_state
                df = st.session_state.df
                df_perguntas = st.session_state.df_perguntas
                colunas_filtro = st.session_state.colunas_filtro
                colunas_perguntas = st.session_state.colunas_perguntas
                df_resultados = st.session_state.df_resultados
                df_plano_acao = st.session_state.df_plano_acao
                filtro_opcao = st.session_state.filtro_opcao
                filtro_valor = st.session_state.filtro_valor
                
                st.write("""
                Escolha abaixo o tipo de relat√≥rio que deseja gerar. Todos os relat√≥rios s√£o baseados nos dados carregados e# Escolha abaixo o tipo de relat√≥rio que deseja gerar. Todos os relat√≥rios s√£o baseados nos dados carregados e 
                # filtros selecionados.
                """)
                
                col1, col2 = st.columns(2)
                
                # Relat√≥rio Excel completo
                with col1:
                    st.subheader("Relat√≥rio Excel Completo")
                    st.write("Relat√≥rio detalhado com m√∫ltiplas abas, incluindo an√°lises por filtros, gr√°ficos e plano de a√ß√£o.")
                    
                    # Usar a fun√ß√£o para gerar Excel com m√∫ltiplas abas e plano de a√ß√£o
                    excel_data = gerar_excel_completo(df, df_perguntas, colunas_filtro, colunas_perguntas)
                    if excel_data:
                        st.download_button(
                            label="Baixar Relat√≥rio Excel Completo",
                            data=excel_data,
                            file_name=f"relatorio_completo_hse_it_{filtro_opcao}_{filtro_valor}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            help="Baixe um relat√≥rio Excel com m√∫ltiplas abas contendo an√°lises por empresa, setor, cargo, etc. e o plano de a√ß√£o sugerido."
                        )
                
                # Relat√≥rios PDF
                with col2:
                    st.subheader("Relat√≥rios PDF")
                    st.write("Relat√≥rios simplificados para compartilhamento e apresenta√ß√£o.")
                    
                    # Gerar PDF da an√°lise
                    pdf_data = gerar_pdf(df_resultados)
                    if pdf_data:
                        st.download_button(
                            label="Baixar Relat√≥rio PDF de Resultados",
                            data=pdf_data,
                            file_name=f"resultados_hse_it_{filtro_opcao}_{filtro_valor}.pdf",
                            mime="application/pdf",
                            help="Relat√≥rio resumido com os resultados da avalia√ß√£o HSE-IT."
                        )
                    
                    # Adicionar op√ß√£o para baixar o PDF do Plano de A√ß√£o
                    pdf_plano_acao = gerar_pdf_plano_acao(df_plano_acao)
                    if pdf_plano_acao:
                        st.download_button(
                            label="Baixar Plano de A√ß√£o PDF",
                            data=pdf_plano_acao,
                            file_name=f"plano_acao_hse_it_{filtro_opcao}_{filtro_valor}.pdf",
                            mime="application/pdf",
                            help="Baixe um PDF espec√≠fico com o plano de a√ß√£o sugerido, incluindo campos para preenchimento de respons√°veis e prazos."
                        )
                
                # Adicionar informa√ß√µes sobre como usar os relat√≥rios
                with st.expander("Como usar os relat√≥rios"):
                    st.write("""
                    ### Relat√≥rio Excel Completo
                    Cont√©m m√∫ltiplas abas com an√°lises detalhadas:
                    - **Empresa Toda**: Vis√£o geral dos fatores psicossociais nas 7 dimens√µes do HSE-IT
                    - **Plano de A√ß√£o**: Sugest√µes de a√ß√µes para cada dimens√£o com maior risco
                    - **Detalhes das Dimens√µes**: Explica√ß√£o sobre cada dimens√£o e suas quest√µes
                    - **Por Setor/Cargo/etc.**: An√°lises segmentadas por filtros demogr√°ficos
                    - **Gr√°fico de Riscos**: Visualiza√ß√£o gr√°fica das dimens√µes
                    
                    ### Relat√≥rio PDF de Resultados
                    Vers√£o simplificada com os principais resultados, ideal para compartilhamento com a lideran√ßa e stakeholders. Cont√©m:
                    - Tabela de resultados por dimens√£o
                    - Descri√ß√£o das dimens√µes do HSE-IT
                    - Interpreta√ß√£o dos n√≠veis de risco
                    
                    ### Plano de A√ß√£o PDF
                    Documento espec√≠fico com as a√ß√µes sugeridas, contendo espa√ßos para preenchimento manual de respons√°veis e prazos. Ideal para:
                    - Discuss√£o em reuni√µes de planejamento
                    - Acompanhamento de a√ß√µes
                    - Documenta√ß√£o do programa de sa√∫de psicossocial
                    """)
            else:
                st.info("Primeiro fa√ßa o upload dos dados na aba 'Upload de Dados'.")
        
        # Quinta aba - Informa√ß√µes HSE-IT
        with tabs[4]:
            st.header("Informa√ß√µes sobre o Question√°rio HSE-IT")
            
            st.write("""
            O HSE-IT (Health and Safety Executive - Indicator Tool) √© um question√°rio validado para avalia√ß√£o de 
            fatores psicossociais no ambiente de trabalho, desenvolvido pela institui√ß√£o brit√¢nica de sa√∫de e seguran√ßa ocupacional.
            
            O question√°rio consiste em 35 perguntas que avaliam 7 dimens√µes de fatores psicossociais, permitindo identificar
            √°reas de risco que precisam de interven√ß√£o.
            """)
            
            # Mostrar dimens√µes do HSE-IT
            st.subheader("Dimens√µes Avaliadas")
            
            for dimensao, questoes in DIMENSOES_HSE.items():
                with st.expander(f"{dimensao} - Quest√µes {questoes}"):
                    st.write(f"**Descri√ß√£o**: {DESCRICOES_DIMENSOES[dimensao]}")
                    st.write("**Quest√µes relacionadas**:")
                    for q in questoes:
                        # Buscar o texto das quest√µes se dispon√≠vel
                        texto_questao = f"Quest√£o {q}"
                        for i in range(1, 36):
                            if i == q:
                                if q == 1:
                                    texto_questao = "Sei claramente o que √© esperado de mim no trabalho"
                                elif q == 2:
                                    texto_questao = "Posso decidir quando fazer uma pausa"
                                elif q == 3:
                                    texto_questao = "Grupos de trabalho diferentes pedem-me coisas dif√≠ceis de conjugar"
                                # Continue com as demais quest√µes se necess√°rio
                                break
                        
                        if q in QUESTOES_INVERTIDAS:
                            st.write(f"- {q}: {texto_questao} *(escala invertida)*")
                        else:
                            st.write(f"- {q}: {texto_questao}")
            
            # Explica√ß√£o sobre a interpreta√ß√£o dos resultados
            st.subheader("Interpreta√ß√£o dos Resultados")
            
            st.write("""
            Os resultados s√£o apresentados em uma escala de 1 a 5, onde valores mais altos geralmente indicam
            melhores condi√ß√µes psicossociais (exceto em quest√µes com escala invertida, onde a l√≥gica √© oposta).
            
            A classifica√ß√£o de risco √© feita com base na m√©dia de cada dimens√£o:
            """)
            
            # Tabela de classifica√ß√£o de risco
            risco_data = {
                "Classifica√ß√£o": ["Risco Muito Alto üî¥", "Risco Alto üü†", "Risco Moderado üü°", "Risco Baixo üü¢", "Risco Muito Baixo üü£"],
                "Pontua√ß√£o M√©dia": ["‚â§ 1", "> 1 e ‚â§ 2", "> 2 e ‚â§ 3", "> 3 e ‚â§ 4", "> 4"],
                "Interpreta√ß√£o": [
                    "Situa√ß√£o cr√≠tica, requer interven√ß√£o imediata", 
                    "Condi√ß√£o preocupante, interven√ß√£o necess√°ria em curto prazo", 
                    "Condi√ß√£o de alerta, melhorias necess√°rias", 
                    "Condi√ß√£o favor√°vel, com oportunidades de melhoria", 
                    "Condi√ß√£o excelente, manter as boas pr√°ticas"
                ]
            }
            df_risco = pd.DataFrame(risco_data)
            st.table(df_risco)
            
            # Notas sobre quest√µes invertidas
            st.subheader("Notas sobre Quest√µes Invertidas")
            
            st.write(f"""
            Algumas quest√µes do HSE-IT possuem escala invertida devido √† sua formula√ß√£o negativa. S√£o elas: {QUESTOES_INVERTIDAS}
            
            Nestas quest√µes, uma resposta de valor mais baixo √© considerada positiva. Por exemplo, para a quest√£o 
            "Tenho prazos imposs√≠veis de cumprir", responder "1 - Nunca" representa uma boa condi√ß√£o de trabalho.
            
            Este aplicativo j√° realiza automaticamente a invers√£o destas quest√µes durante o processamento dos dados.
            """)
            
            # Template para coleta de dados
            st.subheader("Template para Coleta de Dados")
            
            st.write("""
            Voc√™ pode baixar um template Excel para aplica√ß√£o do question√°rio HSE-IT. Este template cont√©m:
            - As 35 quest√µes originais do HSE-IT
            - Campos para informa√ß√µes demogr√°ficas (Setor, Cargo, etc.)
            - Instru√ß√µes detalhadas para aplica√ß√£o
            - Informa√ß√µes sobre as dimens√µes e interpreta√ß√£o
            """)
            
            # Gerar e oferecer o template para download
            template_excel = gerar_template_excel()
            if template_excel:
                st.download_button(
                    label="Baixar Template HSE-IT",
                    data=template_excel,
                    file_name="template_questionario_hse_it.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    help="Template Excel com as 35 quest√µes do HSE-IT e instru√ß√µes para aplica√ß√£o."
                )
            
            # Refer√™ncias
            st.subheader("Refer√™ncias")
            
            st.write("""
            1. Health and Safety Executive (HSE). "Managing the causes of work-related stress: A step-by-step approach using the Management Standards." HSE Books, 2007.
            
            2. Cousins, R., et al. "Management Standards and work-related stress in the UK: Practical development." Work & Stress, 18(2), 113-136, 2004.
            
            3. Mackay, C. J., et al. "Management Standards and work-related stress in the UK: Policy background and science." Work & Stress, 18(2), 91-112, 2004.
            
            Para mais informa√ß√µes, visite o site do HSE: [www.hse.gov.uk/stress](https://www.hse.gov.uk/stress/)
            """)
    else:
        st.stop()  # N√£o mostrar nada abaixo deste ponto se a autentica√ß√£o falhar

# Executar o aplicativo
if __name__ == "__main__":
    main()
